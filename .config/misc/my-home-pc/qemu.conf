# vim:ft=bash
#
# options:
# Windows timezone: {{{1
# -rtc base=localtime
#
# network: {{{1
# for Alpine, remember to set virtio-net:
# -nic user,model=virtio-net-pci
#
# for Windows XP, use ...model=rtl8139
#
# smb: {{{1
# -nic user,smb="smb_dir"
#   access from guest:
#   - windows: open \\10.0.2.4\qemu in explorer.exe
#   - linux: sudo mount -t cifs //10.0.2.4/qemu "smb-mount-path" -o guest,uid="$(id -u)"
#   (We may pass multiple -nic options to qemu; if so, disable nic cards without smb option
#   to make samba in guest OS work!)
#
# run with snapshot (vm-start cmd option): {{{1
# -snapshot
#
# enable audio: {{{1
# -audio pa,model=hda
# for Windows XP, use ...model=ac97

# profiles {{{1
case "$1" in
    generic)
        # disk (-hda, -hdb, ...) should be provided explicitly.
        args=(
            qemu-system-x86_64
            -m 4g -accel kvm
            -smp cpus=2
            # add nic option later.

            # spice
            -vga none -device qxl-vga,vgamem_mb=32 -device virtio-serial-pci -spice unix=on,addr=/tmp/vm_spice/vm_spice.socket,disable-ticketing=on -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 -chardev spicevmc,id=spicechannel0,name=vdagent
            -display spice-app
            -monitor stdio
        )

        # Avoid creating multiple network cards.
        #
        # Avoid specifying model=virtio-net-pci, since changing model causes guest OS
        # like windows 10 not recognize nic properly.
        if printf %s "$*" | grep -vwq -- '-nic'; then
            args=("${args[@]}" -nic user)
        fi
        ;;

    aarch64)
        args=(
            qemu-system-aarch64
            # from https://en.opensuse.org/openSUSE:AArch64
            # qemu-uefi-aarch64.bin is from `qemu-uefi-aarch64-202008-10.8.1.noarch.rpm` in openSUSE.
            #-bios ~/iso/qemu-uefi-aarch64.bin
            -bios /usr/share/edk2/aarch64/QEMU_EFI.fd  # ... or this one from fedora pkg
            # cdrom installation. comment it out if unused.
            #-drive format=raw,readonly=on,file=../iso/alpine-virt-3.17.3-aarch64.iso
            #-m 3g -smp 2  # macos: -m (memory) is limited after some update? {{{
            # qemu-system-aarch64: Addressing limited to 32 bits, but memory exceeds it by 3221225472 bytes
            # }}}
            -m 4g -smp 2
            #-M virt,accel=hvf,highmem=off -cpu cortex-a57  # if host is macos: highmem: https://mstone.info/posts/qemu-aarch64-hvf-20210831/; accel=hvf (mac m1).
            -M virt,accel=tcg -cpu cortex-a57  # ... use tcg if host is not aarch64.
            -nic user,model=virtio-net-pci  # tweak port forwarding here.
            -drive if=virtio,file=alpine-aarch64.qcow2  # disk.

            -nographic
            -monitor null
            #-serial null  # swap this line with next line, if run vm in background.
            -chardev stdio,id=char0,signal=off -serial chardev:char0
        )
        ;;

    mac)
       # search REPO_PATH in the install script to find which files should be copied from repos.
       # copied from https://github.com/kholia/OSX-KVM/blob/master/OpenCore-Boot.sh, some whitespace trimmed {{{
       #!/usr/bin/env bash
       # Special thanks to:
       # https://github.com/Leoyzen/KVM-Opencore
       # https://github.com/thenickdude/KVM-Opencore/
       # https://github.com/qemu/qemu/blob/master/docs/usb2.txt
       #
       # qemu-img create -f qcow2 mac_hdd_ng.img 128G
       #
       # echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)
       ############################################################################
       # NOTE: Tweak the "MY_OPTIONS" line in case you are having booting problems!
       ############################################################################
       #  }}}
       #
       # lx_NOTE: from updated version:
       # # Change `Penryn` to `Haswell-noTSX` in OpenCore-Boot.sh file for macOS Sonoma!
       #
       MY_OPTIONS="+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check"
       # This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with
       # macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6.
       ALLOCATED_RAM="8192" # MiB
       CPU_SOCKETS="1"
       CPU_CORES="2"
       CPU_THREADS="4"
       #REPO_PATH="."  # lx_NOTE: changed!
       REPO_PATH="macos/"
       OVMF_DIR="."
       # shellcheck disable=SC2054
       args=(
           -enable-kvm -m "$ALLOCATED_RAM" -cpu Haswell-noTSX,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,"$MY_OPTIONS"
           -machine q35
           -device qemu-xhci,id=xhci
           -device usb-kbd,bus=xhci.0 -device usb-tablet,bus=xhci.0
           -smp "$CPU_THREADS",cores="$CPU_CORES",sockets="$CPU_SOCKETS"
           -device usb-ehci,id=ehci
           # -device usb-kbd,bus=ehci.0
           # -device usb-mouse,bus=ehci.0
           # -device nec-usb-xhci,id=xhci
           # -global nec-usb-xhci.msi=off
           # -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off
           # -device usb-host,vendorid=0x8086,productid=0x0808  # 2 USD USB Sound Card
           # -device usb-host,vendorid=0x1b3f,productid=0x2008  # Another 2 USD USB Sound Card
           -device isa-applesmc,osk="ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"
           -drive if=pflash,format=raw,readonly=on,file="$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd"
           -drive if=pflash,format=raw,file="$REPO_PATH/$OVMF_DIR/OVMF_VARS-1920x1080.fd"
           -smbios type=2
           -device ich9-intel-hda -device hda-duplex
           -device ich9-ahci,id=sata
           -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file="$REPO_PATH/OpenCore/OpenCore.qcow2"
           -device ide-hd,bus=sata.2,drive=OpenCoreBoot
           # lx_NOTE: installation completed, so comment these 2 lines.
           # -device ide-hd,bus=sata.3,drive=InstallMedia
           # -drive id=InstallMedia,if=none,file="$REPO_PATH/BaseSystem.img",format=raw
           -drive id=MacHDD,if=none,file="$REPO_PATH/mac_hdd_ng.img",format=qcow2
           -device ide-hd,bus=sata.4,drive=MacHDD
           # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27
           -netdev user,id=net0 -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27
           # -netdev user,id=net0 -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27  # Note: Use this line for High Sierra
           -monitor stdio
           #-device vmware-svga
           # lx_NOTE: use spice, since the ui is familiar.
           -vga none -device vmware-svga,vgamem_mb=512 -device virtio-serial-pci -spice unix=on,addr=/tmp/vm_spice/vm_spice.socket,disable-ticketing=on -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 -chardev spicevmc,id=spicechannel0,name=vdagent
           -display spice-app
       )
       # lx_NOTE: my setup
       args=(qemu-system-x86_64 -name macOS "${args[@]}")
       ;;
esac
