# vim:fdm=marker
# setting {{{1
# term {{{
%if "#{==:${TERM},linux}"
    set -g default-terminal "linux"
%else
    # seems that vim background color detection only works with xterm-256color.
    set-option -sa terminal-overrides ",xterm-256color:RGB"
    set -g default-terminal "xterm-256color"
%endif
# }}}

# non-login shell
set -g default-command zsh

# title
set -g set-titles on

# mouse
set -g mouse on

# set $EDITOR to vim in case of not set in shell rc
setenv -g EDITOR vim

# pane index begin with 1
set -g base-index 1
setw -g pane-base-index 1

# change interval
set -g status-interval 1

# simple ui
set -g status-left '[#S] '
set -g status-left-length 20
set -g status-right '[%Y-%m-%d %H:%M UTC%z]'
set -g status-style 'bg=default,bold'
# instead of fg=white: make it viewable in light background
setw -g window-status-current-style 'bg=cyan,bold fg=black'

# escape time
set -s escape-time 0

# clipboard
# use system clipboard; search "pbcopy" in this file.
# NOTE: to use osc52, this option should be set to on!
set -g set-clipboard off

# word selection
set -g word-separators "[]{}()<>\"',"

# change prefix (from c-b to c-s); some vi keys

set -g prefix C-s
unbind C-b
bind C-s send-prefix

# advanced bell notification
set-hook -g alert-bell 'run-shell ~/bin/tmux-notify'

# key binding {{{1
# select window / pane {{{2
bind h selectp -L
bind j selectp -D
bind k selectp -U
bind l selectp -R

# send M-hjkl to pane if zoomed or only one pane in window.
bind -n M-h if-shell -F '#{||:#{==:#{window_panes},1},#{==:#{window_zoomed_flag},1}}' 'send M-h' 'selectp -L'
bind -n M-j if-shell -F '#{||:#{==:#{window_panes},1},#{==:#{window_zoomed_flag},1}}' 'send M-j' 'selectp -D'
bind -n M-k if-shell -F '#{||:#{==:#{window_panes},1},#{==:#{window_zoomed_flag},1}}' 'send M-k' 'selectp -U'
bind -n M-l if-shell -F '#{||:#{==:#{window_panes},1},#{==:#{window_zoomed_flag},1}}' 'send M-l' 'selectp -R'

bind -n M-n selectw -n
bind -n M-p selectw -p

# # gen with vim9:
# @t = ''
# for i in range(1, 9)
#   @T = printf('bind -n M-%s selectw -t %s', i, i) .. "\n"
# endfor
bind -n M-1 selectw -t 1
bind -n M-2 selectw -t 2
bind -n M-3 selectw -t 3
bind -n M-4 selectw -t 4
bind -n M-5 selectw -t 5
bind -n M-6 selectw -t 6
bind -n M-7 selectw -t 7
bind -n M-8 selectw -t 8
bind -n M-9 run 's=$(tmux list-windows | tail -n 1); tmux selectw -t "${s%%:*}"'

bind -N '(u) select last window' 9 send -K M-9

# create pane {{{2
bind c neww -c '$HOME'
bind C neww -c '#{pane_current_path}'
bind s splitw -v -c '$HOME'
bind S splitw -v -c '#{pane_current_path}'
bind v splitw -h -c '$HOME'
bind V splitw -h -c '#{pane_current_path}'

bind -n M-t neww -c '#{pane_current_path}'

# misc {{{2
bind -n M-e run ~/.config/tmux/lx/edit-line/edit-line
bind -N '(u) edit-line' e send -K M-e
bind -n M-o run '~/.config/tmux/lx/hints/hints #{pane_width} #{pane_height} #{pane_bottom}'
bind -N '(u) hints' o send -K M-o
bind -N '(u) resize-pane mode' r popup -E -T ' resize-pane ' -w 60 -h 3 'vim -S ~/.config/tmux/lx/pane-resize.vim --clean -Nu NONE'
# rectangle-toggle trick:
# https://github.com/tmux/tmux/issues/3642#issuecomment-1656920985
bind -n M-MouseUp1Pane selectp -t = \; copy-mode \; send -X rectangle-toggle \; run '~/.config/tmux/lx/move-cursor/move-cursor'
run -b ~/.config/tmux/lx/termux-battery-status-longrun

# make copy/paste use system clipboard;
#
# get default binding with:
#   tmux list-keys | grep DoubleClick1
# then apped "pbcopy ...".
bind -T copy-mode    DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "pbcopy > /dev/null"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "pbcopy > /dev/null"
bind -T root         DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode -H ; send-keys -X select-word ; run-shell -d 0.3 ; send-keys -X copy-pipe-and-cancel "pbcopy > /dev/null" }

bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy > /dev/null"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy > /dev/null"
bind C-v run "pbpaste | tmux load-buffer - ; tmux paste-buffer -p"
bind -n M-v run "pbpaste | tmux load-buffer - ; tmux paste-buffer -p"

bind -N '(u) session switch' w choose-session -Z
#bind -n M-g
bind -N '(u) select tmux buffer to paste (depends on fzf)' '#' \
    popup -E -w 100% -h 50% -y 0 -T ' paste tmux buffer ' \
    sh -c 'bufname=$(tmux list-buffers | fzf | grep -Eo "^[^:]+"); \
    if [ -n "$bufname" ]; then tmux paste-buffer -b "$bufname" >/dev/null; fi'

# plugin {{{1
# https://github.com/tmux-plugins/tmux-resurrect  {{{2
# why is not this default on?
set -g @resurrect-capture-pane-contents 'on'
# https://github.com/tmux-plugins/tmux-resurrect/issues/275#issuecomment-430998621
# save on detach; by default, use `prefix <C-r>` to restore.
bind-key d run-shell "#{@resurrect-save-script-path} quiet" \; detach-client
# load plugin
run-shell ~/.config/tmux/plugin/tmux-resurrect/resurrect.tmux
# }}}2
