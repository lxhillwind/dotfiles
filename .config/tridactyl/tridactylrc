" vim: set filetype=tridactyl
" About {{{1
"
" - ~/.tridactylrc will be sourced at last; it can be used for local config. {{{
"   (see `:help source` in tridactyl about configuration file priority) }}}
"
" - search "A-6" in this file, if OS is windows: we need additional setting.
"
" firefox plugin setup {{{
" - Tridactyl: :nativeinstall;
" - Simple Tab Groups (stg): bind physical key <A-g> / <A-e> via global preference
"   (they may be different keys in windows (autohotkey) / macos (karabiner),
"   so we cannot set them via `setpref`);
"   "打开弹出窗口": <A-g>; "移动选中标签页到自定义群组": <A-e> }}}
"
" firefox theme setup {{{
" https://codeberg.org/Freeplay/Firefox-Onebar }}}
"
" - \ at end of line is used for line-continuation, see: {{{
" https://github.com/tridactyl/tridactyl/blob/fcdcdc028f01d61589d3e84923f4d3318967c3aa/src/background/config_rc.ts#L61 }}}
"
" - use `seturl` / `bindurl` for speical case.

" Pre {{{1

set configversion 2.0

" WARNING: use this to clear config (binding, etc) in memory.
sanitise tridactyllocal

" about:config {{{1

" simple-tab-group cannot recover local (file:// schema) webpages properly,
" if STG is not the last window to close. (last is private window seems fine)
" **
" It may help to show this info in homepage, which gets shown when creating new window
" **
setpref browser.tabs.warnOnClose true

" default 1; set to 3, then last closed tabs get recovered on startup
setpref browser.startup.page 3

" press alt-somekey without opening menu; ff restart required!
setpref ui.key.menuAccessKey 17

" press alt does not focus on menu
setpref ui.key.menuAccessKeyFocuses false

" disable typing / to quick find
setpref accessibility.typeaheadfind.manual false

" required for userChrome.css (Firefox-Onebar)
setpref toolkit.legacyUserProfileCustomizations.stylesheets true

" thin tabbar
setpref browser.uidensity 1

" I don't use pocket
setpref extensions.pocket.enabled false

" General Settings {{{1
set allowautofocus false
set smoothscroll true
set hintchars asdfgqwertzxcv
set modeindicatorshowkeys true
set followpagepatterns {"next":"^(next|newer|上一章|上一篇|上一页)\\b|»|>>|more","prev":"^(prev(ious)?|older|下一章|下一篇|下一页)\\b|«|<<"}
set tabopencontaineraware true
" tabo default alias (tabonly) is dangerous, so let's remap it.
alias tabo tabopen

" Security {{{1
" default binding p / P (if content in clipboard does not look like url, then
" search it) is dangerous; so use a blank search engine as default.
set searchengine blank
set searchurls.blank http://localhost/maybe-pressed-wrong-key?%s

" Search Engine {{{1
set searchurls.bd https://www.baidu.com/s?wd=%s
set searchurls.bg https://www.bing.com/search?q=%s&ensearch=1
set searchurls.bl https://search.bilibili.com/all?keyword=%s
set searchurls.cd https://www.bing.com/dict/search?mkt=zh-CN&q=%s
set searchurls.cnf https://command-not-found.com/%s
set searchurls.co https://www.collinsdictionary.com/english/%s
set searchurls.dg https://duckduckgo.com/?q=%s
set searchurls.gg https://www.google.com/search?q=%s
set searchurls.man https://man.archlinux.org/search?q=%s&go=Go
set searchurls.pkg https://pkgs.org/search/?q=%s
set searchurls.r https://old.reddit.com/r/%s
set searchurls.sh http://symbolhound.com/?q=%s
set searchurls.tr https://www.microsofttranslator.com/bv.aspx?from=&to=zh-CHS&a=%s
set searchurls.wk https://www.wikipedia.org/w/index.php?title=Special:Search&search=%s
set searchurls.yh https://search.yahoo.com/search?q=%s

" Default Binding created via ":mktridactylrc -f" {{{1
" tridactyl takes 1/3s for every excmd (info: from a github issue), so we
" comment out default binding here to speedup loading.

"bind <C-6> buffer #
"bind <F1> help
"bind o fillcmdline open
"bind O current_url open
"bind w fillcmdline winopen
"bind W current_url winopen
"bind t fillcmdline tabopen
"bind ]] followpage next
"bind [[ followpage prev
"bind [c urlincrement -1
"bind ]c urlincrement 1
"bind <C-x> urlincrement -1
"bind <C-a> urlincrement 1
"bind T current_url tabopen
"bind yy clipboard yank
"bind ys clipboard yankshort
"bind yc clipboard yankcanon
"bind ym clipboard yankmd
"bind yo clipboard yankorg
"bind yt clipboard yanktitle
"bind gh home
"bind gH home true
"bind p clipboard open
"bind P clipboard tabopen
"bind j scrollline 10
"bind <C-e> scrollline 10
"bind k scrollline -10
"bind <C-y> scrollline -10
"bind h scrollpx -50
"bind l scrollpx 50
"bind G scrollto 100
"bind gg scrollto 0
"bind <C-u> scrollpage -0.5
"bind <C-d> scrollpage 0.5
"bind <C-f> scrollpage 1
"bind <C-b> scrollpage -1
"bind <C-v> nmode ignore 1 mode normal
"bind $ scrollto 100 x
"bind ^ scrollto 0 x
"bind H back
"bind L forward
"bind <C-o> jumpprev
"bind <C-i> jumpnext
"bind D composite tabprev; tabclose #
"bind gx0 tabclosealltoleft
"bind gx$ tabclosealltoright
"bind << tabmove -1
"bind >> tabmove +1
"bind U undo window
"bind r reload
"bind R reloadhard
"bind gi focusinput -l
"bind g? rot13
"bind g! jumble
"bind g; changelistjump -1
"bind J tabprev
"bind K tabnext
"bind gt tabnext_gt
"bind gT tabprev
"bind g^ tabfirst
"bind g0 tabfirst
"bind g$ tablast
"bind ga tabaudio
"bind gr reader
"bind gu urlparent
"bind gU urlroot
"bind : fillcmdline_notrail
"bind s fillcmdline open search
"bind S fillcmdline tabopen search
"bind M gobble 1 quickmark
"bind B fillcmdline taball
"bind b fillcmdline tab
"bind ZZ qall
"bind f hint
"bind F hint -b
"bind gF hint -qb
"bind ;i hint -i
"bind ;b hint -b
"bind ;o hint
"bind ;I hint -I
"bind ;k hint -k
"bind ;K hint -K
"bind ;y hint -y
"bind ;Y hint -cF img i => tri.excmds.yankimage(tri.urlutils.getAbsoluteURL(i.src))
"bind ;p hint -p
"bind ;h hint -h
"bind v hint -h
"bind ;P hint -P
"bind ;r hint -r
"bind ;s hint -s
"bind ;S hint -S
"bind ;a hint -a
"bind ;A hint -A
"bind ;; hint -; *
"bind ;# hint -#
"bind ;v hint -W mpvsafe
"bind ;V hint -V
"bind ;w hint -w
"bind ;t hint -W tabopen
"bind ;O hint -W fillcmdline_notrail open 
"bind ;W hint -W fillcmdline_notrail winopen 
"bind ;T hint -W fillcmdline_notrail tabopen 
"bind ;z hint -z
"bind ;m composite hint -Jpipe img src | open images.google.com/searchbyimage?image_url=
"bind ;M composite hint -Jpipe img src | tabopen images.google.com/searchbyimage?image_url=
"bind ;gi hint -qi
"bind ;gI hint -qI
"bind ;gk hint -qk
"bind ;gy hint -qy
"bind ;gp hint -qp
"bind ;gP hint -qP
"bind ;gr hint -qr
"bind ;gs hint -qs
"bind ;gS hint -qS
"bind ;ga hint -qa
"bind ;gA hint -qA
"bind ;g; hint -q;
"bind ;g# hint -q#
"bind ;gv hint -qW mpvsafe
"bind ;gw hint -qw
"bind ;gb hint -qb
"bind ;gF hint -qb
"bind ;gf hint -q
"bind <S-Insert> mode ignore
"bind <AC-Escape> mode ignore
"bind <AC-`> mode ignore
"bind <S-Escape> mode ignore
"bind <Escape> composite mode normal ; hidecmdline
"bind <C-[> composite mode normal ; hidecmdline
"bind a current_url bmark
"bind A bmark
"bind zi zoom 0.1 true
"bind zo zoom -0.1 true
"bind zm zoom 0.5 true
"bind zr zoom -0.5 true
"bind zM zoom 0.5 true
"bind zR zoom -0.5 true
"bind zz zoom 1
"bind zI zoom 3
"bind zO zoom 0.3
"bind . repeat
"bind <AS-ArrowUp><AS-ArrowUp><AS-ArrowDown><AS-ArrowDown><AS-ArrowLeft><AS-ArrowRight><AS-ArrowLeft><AS-ArrowRight>ba open https://www.youtube.com/watch?v=M3iOROuTuMA

" Binds {{{1
bind x tabclose
bind X undo
bind d scrollpage 0.5
bind u scrollpage -0.5
" j / k: default (10) too much.
bind j scrollline 5
bind k scrollline -5
bind gs viewsource
bind gf hint -t
bind gp pin
bind gm mute toggle
bind m gobble 1 markadd
" default is `, which is hard to press in most 60% keyboard.
bind ' gobble 1 markjump
bind gC tabduplicate

bind --mode=normal ZZ js alert("before closing window, ensure STG is the last window!")

" make <Escape> able to exit simple-tab-group's switch group page.
unbind --mode=normal <Escape>

" this is quite handy.
" I don't know if it is default... just record it here.
bind --mode=browser <C-6> tab #

" in windows, <A-1> - <A-9> can not be used to navigate tab (it's ok in linux); {{{
" so we map <A-1> - <A-9> to <C-1> - <C-9> with ahk to make them work.
"
" after using tridactyl, <C-6> should be used as <C-^> (like in vim);
" so we bind <C-6> to <A-6> in ahk, then <C-6> and <A-6> produce different keys:
"
" When we pressing <A-6>, <C-6> is recognized by firefox, so <C-6> should be unbind.
"
" But tridactylrc is used in different OS,
" so we need to put these in ~/.tridactylrc only if using Windows:
"
"    bind --mode=browser <A-6> tab #
"    unbind <C-6>
"    unbind --mode=browser <C-6>
" }}}

" search with...
bind --mode=visual s composite js " " + document.getSelection().toString() | fillcmdline open ; text.beginning_of_line ; text.forward_word ; text.forward_char
bind --mode=visual S composite js " " + document.getSelection().toString() | fillcmdline tabopen ; text.beginning_of_line ; text.forward_word ; text.forward_char

" easy translation
bind --mode=visual cd composite js "cd " + document.getSelection().toString() | tabopen
" this is heavy on CPU, so only use it for specific sites.
seturl www.bing.com/dict preventautofocusjackhammer true

" do not use bmark, and we use `af` as binding; so unbind a / A.
unbind a
unbind A

" create duplicated binding for muscle memory.
bind yf hint -y
bind af hint -qb

" yank (ip)
bind --mode=normal y1 composite js document.location.hostname | clipboard yank
" yank (ip:port)
bind --mode=normal y2 composite js document.location.host | clipboard yank
" yank (url decoded)
bind yY composite js decodeURI(document.location) | clipboard yank

" let's keep <C-f> for native function (it's search in windows / linux)
unbind <C-f>
unbind <C-b>
" some others.
unbind <C-a>
unbind <C-x>
unbind --mode=normal <C-o>
unbind --mode=normal <C-i>

" readline
" <C-/> as select_all works natively on GTK (linux) (without bind).
" - TODO: test if select_all (<C-/>) work for windows.
" - TODO: impl select_all for ex mode.
" custom select_all in ex mode won't work: {{{
"bind --mode=ex <C-/> js document.activeElement.select()
" }}}
bind --mode=input <C-/> js document.activeElement.select()
bind --mode=insert <C-/> js document.activeElement.select()
bind --mode=ex <C-a> text.beginning_of_line
bind --mode=input <C-a> text.beginning_of_line
bind --mode=insert <C-a> text.beginning_of_line
bind --mode=ex <C-e> text.end_of_line
bind --mode=input <C-e> text.end_of_line
bind --mode=insert <C-e> text.end_of_line
bind --mode=ex <C-f> text.forward_char
bind --mode=input <C-f> text.forward_char
bind --mode=insert <C-f> text.forward_char
bind --mode=ex <C-b> text.backward_char
bind --mode=input <C-b> text.backward_char
bind --mode=insert <C-b> text.backward_char
bind --mode=ex <C-h> text.delete_backward_char
bind --mode=input <C-h> text.delete_backward_char
bind --mode=insert <C-h> text.delete_backward_char
bind --mode=ex <C-d> text.delete_char
bind --mode=input <C-d> text.delete_char
bind --mode=insert <C-d> text.delete_char
" <C-w> for windows / linux does not work; requires customize omni.ja.
bind --mode=ex <C-w> text.backward_kill_word
bind --mode=input <C-w> text.backward_kill_word
bind --mode=insert <C-w> text.backward_kill_word
" use <C-Backspace> to backward_kill_word in all OS; {{{
" this is default on linux / windows }}}
bind --mode=ex <C-Backspace> text.backward_kill_word
bind --mode=input <C-Backspace> text.backward_kill_word
bind --mode=insert <C-Backspace> text.backward_kill_word
bind --mode=ex <C-u> text.backward_kill_line
bind --mode=input <C-u> text.backward_kill_line
bind --mode=insert <C-u> text.backward_kill_line
bind --mode=ex <C-k> text.kill_line
bind --mode=input <C-k> text.kill_line
bind --mode=insert <C-k> text.kill_line

" Site Settings {{{1

" prevent autofocus
seturl pkgs.org/search preventautofocusjackhammer true

" some general rule:
" - bind c for site specific hint;

" qidian.com {{{
bindurl qidian.com --mode=normal c hint -Jc span.review-count\
,div.chapter-control > a\
,span.j-open-reply\
,div.nav-btn-group > a.nav-btn\
,button.flex.items-center.text-s-gray-500.font-medium.text-s3.mt-8px.h-28px\
,.review-replies-popup > .close-btn
seturl qidian.com hintchars vzcxsda
" don't know why with default hintfiltermode (simple), it's easy to click wrong hint.
" so use vimperator-mode to allow filtering by pressing number (which is in review-count).
seturl qidian.com hintfiltermode vimperator
" native <Space> blocks sometimes.
bindurl qidian.com --mode=normal <Space> scrollpage 0.97
bindurl qidian.com --mode=normal <S-Space> scrollpage -0.97
" }}}

" bilibili.com {{{
bindurl bilibili.com --mode=normal c hint -Jc li.be-tab-item,div.toggle-btn\
,div.list-box > div > div.item.sortable\
,#app > div > aside.left > section.sticky > div > div.bili-dyn-live-users__body > div > div.bili-dyn-live-users__item__right\
,#app > div > aside.right > section.sticky > div > div:nth-child(n)\
,#app > div > main > section:nth-child(2) > div > div.bili-dyn-up-list__window > div > div:nth-child(n)\
,div.view-more > div.view-more-default > span.view-more-btn\
,#app > div > div > div.topic-detail__content > div > div.topic-list > div.list-view.topic-list__flow-list > div:nth-child(1) > div:nth-child(n) > div > div > div.bili-dyn-item__footer > div:nth-child(2) > div

" emulate arrow key (to control video player).
" this takes high cpu, use with care.
"bindurl bilibili.com --mode=normal j exclaim_quiet powershell -Command "(New-Object -ComObject WScript.Shell).SendKeys('{DOWN}')"
"bindurl bilibili.com --mode=normal k exclaim_quiet powershell -Command "(New-Object -ComObject WScript.Shell).SendKeys('{UP}')"
"bindurl bilibili.com --mode=normal h exclaim_quiet powershell -Command "(New-Object -ComObject WScript.Shell).SendKeys('{LEFT}')"
"bindurl bilibili.com --mode=normal l exclaim_quiet powershell -Command "(New-Object -ComObject WScript.Shell).SendKeys('{RIGHT}')"

" }}}

" bind c for sub pages {{{
bindurl lobste.rs --mode=normal c hint -bJc span.comments_label > a
bindurl news.ycombinator.com --mode=normal c hint -bJc span.subline > a:nth-child(6)
bindurl old.reddit.com --mode=normal c hint -bJc a.bylink.comments.may-blank
" }}}

" site redirection {{{
autocmd DocStart ^http(s?)://www.reddit.com/r/ urlmodify -t www old
" }}}

" Misc {{{1

" read it later (all thing about <C-b>) {{{2

" preview current page.
bind --mode=normal <C-b> js window.location = 'https://www.instapaper.com/text?u=' + encodeURIComponent(window.location.href);

" ... then save it to read list.
bindurl https://www.instapaper.com/text\?u=.* --mode=normal <C-b> hint -Jc .js_read_later

" open instapaper easily. (t <CR> <C-b>)
bindurl moz-extension://.*/static/newtab.html <C-b> open https://www.instapaper.com/u

" ... rapid mode in various site;
" show hint in sibling node instead of target node, so we can see full title.
bindurl https://news.ycombinator.com/(\?p=.*|)$ <C-b> hint -qJc td.votelinks -F e => { tri.excmds.tabopen("-b",'https://www.instapaper.com/text?u=' + encodeURIComponent(e.nextElementSibling.querySelector('span.titleline > a').href)); }
bindurl https://lobste.rs/(page/.*|)$ <C-b> hint -qJc div.voters -F e => { tri.excmds.tabopen("-b",'https://www.instapaper.com/text?u=' + encodeURIComponent(e.nextElementSibling.querySelector('a.u-url').href)); }

" Load local config and alert for finish {{{1
source ~/.tridactylrc
js alert("tridactylrc loaded.")
