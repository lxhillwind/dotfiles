" vim: set filetype=tridactyl
" About {{{1
"
" - ~/.tridactylrc will be sourced at last; it can be used for local config. {{{
"   (see `:help source` in tridactyl about configuration file priority) }}}
"
" - search "A-6" in this file, if OS is windows: we need additional setting.
" - search "ContextMenu" in this file, if OS is mac: we need additional setting.
"
" NOTE: js tri.excmds.unbind in tridactylrc may not work!
"
" firefox plugin setup {{{
" - Tridactyl: :nativeinstall;
" - Simple Tab Groups (stg): bind physical key <A-g> / <A-e> via global preference
"   (they may be different keys in windows (autohotkey) / macos (karabiner),
"   so we cannot set them via `setpref`);
"   "打开弹出窗口": <A-g>; "移动选中标签页到自定义群组": <A-e> }}}
"
" firefox theme setup {{{
" https://codeberg.org/Freeplay/Firefox-Onebar }}}
"
" - \ at end of line is used for line-continuation, see: {{{
" https://github.com/tridactyl/tridactyl/blob/fcdcdc028f01d61589d3e84923f4d3318967c3aa/src/background/config_rc.ts#L61 }}}
"
" - use `seturl` / `bindurl` for speical case.

" Pre {{{1

set configversion 2.0

" WARNING: use this to clear config (binding, etc) in memory.
" reason to do this:
" - if we do not clear config, it is easy to mess up (`:source` won't help);
" - store "temporary config" in file will make it easier to manage.
sanitise tridactyllocal

" Inject our functions to js / jsb. {{{1
" there is no way to define it to make new page see it automatically;
" so we do this magic (monkey patch?).
" search `magic_define` for usage.

command magic_define js \
tri.lx = {}; \
tri.lx.is_win32 = /^Win32/.test(navigator.platform); \
tri.lx.is_mac = /^Mac/.test(navigator.platform); \
tri.lx.is_linux = /^Linux/.test(navigator.platform); \
tri.lx.sh = cmd => tri.native.run(cmd); \
if (tri.lx.is_mac) tri.lx.sh = cmd => tri.native.run(`export PATH=$(zsh -ic 'echo $PATH'); ${cmd}`); \
if (tri.lx.is_win32) tri.lx.sh = cmd => { let cmd_new = cmd; cmd_new = cmd_new.replace(/\\(?=("))/g, '\\\\').replace(/\\$/, '\\\\').replace(/"/g, '\\"'); cmd_new = '"' + cmd_new + '"'; cmd_new = cmd_new.replace(/([<>^|&()"])/g, '^$1'); return tri.native.run(`busybox sh -c ${cmd_new}`); }

jsb tri.excmds.composite('magic_define')

" about:config {{{1

" simple-tab-group cannot recover local (file:// schema) webpages properly,
" if STG is not the last window to close. (last is private window seems fine)
" **
" It may help to show this info in homepage, which gets shown when creating new window
" **
setpref browser.tabs.warnOnClose true

" default 1; set to 3, then last closed tabs get recovered on startup
setpref browser.startup.page 3

" press alt-somekey without opening menu; ff restart required!
setpref ui.key.menuAccessKey 17

" press alt does not focus on menu
setpref ui.key.menuAccessKeyFocuses false

" disable typing / to quick find
setpref accessibility.typeaheadfind.manual false

" make sites' autofocus harder
setpref browser.autofocus false

" required for userChrome.css (Firefox-Onebar)
setpref toolkit.legacyUserProfileCustomizations.stylesheets true

" thin tabbar
setpref browser.uidensity 1

" I don't use pocket
setpref extensions.pocket.enabled false

" General Settings {{{1
set allowautofocus false
set smoothscroll true
set hintchars asdfgqwertzxcv
set modeindicatorshowkeys true
set followpagepatterns {"next":"^(next|newer|下一章|下一篇|下一页)\\b|»|>>|more","prev":"^(prev(ious)?|older|上一章|上一篇|上一页)\\b|«|<<"}
set tabopencontaineraware true
" tabo default alias (tabonly) is dangerous, so let's remap it.
alias tabo tabopen

" Security {{{1
" default binding p / P (if content in clipboard does not look like url, then
" search it) is dangerous; so use a blank search engine as default.
set searchengine blank
set searchurls.blank http://localhost/maybe-pressed-wrong-key?%s

" Search Engine {{{1
set searchurls.bd https://www.baidu.com/s?wd=%s
set searchurls.bg https://www.bing.com/search?q=%s&ensearch=1
set searchurls.bl https://search.bilibili.com/all?keyword=%s
set searchurls.cd https://www.bing.com/dict/search?mkt=zh-CN&q=%s
set searchurls.cnf https://command-not-found.com/%s
set searchurls.co https://www.collinsdictionary.com/english/%s
set searchurls.dg https://duckduckgo.com/?q=%s
set searchurls.gg https://www.google.com/search?q=%s
set searchurls.man https://man.archlinux.org/search?q=%s&go=Go
set searchurls.pkg https://pkgs.org/search/?q=%s
set searchurls.r https://old.reddit.com/r/%s
set searchurls.sh http://symbolhound.com/?q=%s
set searchurls.tr https://www.microsofttranslator.com/bv.aspx?from=&to=zh-CHS&a=%s
set searchurls.wk https://www.wikipedia.org/w/index.php?title=Special:Search&search=%s
set searchurls.yh https://search.yahoo.com/search?q=%s

" Default Binding can be viewed here: {{{1
" moz-extension://26bcd09d-5ca9-41d3-bceb-069caf61445b/static/docs/classes/_src_lib_config_.default_config.html
" (**open it with firefox**; get this by `:help` then read the second paragraph.)
"
" tridactyl takes 100ms for every excmd, so we do re-bind default binding
" here to speedup loading.
" https://github.com/tridactyl/tridactyl/issues/1409#issuecomment-581299773

" Binds {{{1
bind x tabclose
bind X undo
bind d scrollpage 0.5
bind u scrollpage -0.5
" j / k: default (10) too much.
bind j scrollline 5
bind k scrollline -5
bind gs viewsource
bind gf hint -t
bind gp pin
bind gm mute toggle
bind m gobble 1 markadd
" default is `, which is hard to press in most 60% keyboard.
bind ' gobble 1 markjump
bind gC tabduplicate

bind --mode=normal ZZ js alert("before closing window, ensure STG is the last window!")

" make <Escape> able to exit simple-tab-group's switch group page.
unbind --mode=normal <Escape>

" this is quite handy.
" I don't know if it is default... just record it here.
bind --mode=browser <C-6> tab #

" in windows, <A-1> - <A-9> can not be used to navigate tab (it's ok in linux); {{{
" so we map <A-1> - <A-9> to <C-1> - <C-9> with ahk to make them work.
"
" after using tridactyl, <C-6> should be used as <C-^> (like in vim);
" so we bind <C-6> to <A-6> in ahk, then <C-6> and <A-6> produce different keys:
"
" When we pressing <A-6>, <C-6> is recognized by firefox, so <C-6> should be unbind.
"
" But tridactylrc is used in different OS,
" so we need to put these in ~/.tridactylrc only if using Windows:
"
"    bind --mode=browser <A-6> tab #
"    unbind <C-6>
"    unbind --mode=browser <C-6>
" }}}

" search with...
bind --mode=visual s composite js " " + document.getSelection().toString() | fillcmdline open ; text.beginning_of_line ; text.forward_word ; text.forward_char
bind --mode=visual S composite js " " + document.getSelection().toString() | fillcmdline tabopen ; text.beginning_of_line ; text.forward_word ; text.forward_char

" easy translation
bind --mode=visual cd composite js "cd " + document.getSelection().toString() | tabopen

" do not use bmark, and we use `af` as binding; so unbind a / A.
unbind a
unbind A

" create duplicated binding for muscle memory.
bind yf hint -y
bind af hint -qb

" yank (ip)
bind --mode=normal y1 composite js document.location.hostname | clipboard yank
" yank (ip:port)
bind --mode=normal y2 composite js document.location.host | clipboard yank
" yank (url decoded)
bind yY composite js decodeURI(document.location) | clipboard yank
" yank image url
bind yi composite hint -Jpipe img src | clipboard yank

" let's keep <C-f> for native function (it's search in windows / linux)
unbind <C-f>
" some others.
unbind <C-b>
unbind <C-a>
unbind <C-x>
unbind <C-o>
unbind <C-d>
unbind <C-u>
" <C-i> in input / insert mode should be kept (edit-with-vim)
unbind --mode=normal <C-i>

" readline {{{2
" <C-/> as select_all works natively on GTK (linux) (without bind).
" - TODO: test if select_all (<C-/>) work for windows.
" - TODO: impl select_all for ex mode.
" custom select_all in ex mode won't work: {{{
"bind --mode=ex <C-/> js document.activeElement.select()
" }}}
bind --mode=input <C-/> js document.activeElement.select()
bind --mode=insert <C-/> js document.activeElement.select()
bind --mode=ex <C-a> text.beginning_of_line
bind --mode=input <C-a> text.beginning_of_line
bind --mode=insert <C-a> text.beginning_of_line
bind --mode=ex <C-e> text.end_of_line
bind --mode=input <C-e> text.end_of_line
bind --mode=insert <C-e> text.end_of_line
bind --mode=ex <C-f> text.forward_char
bind --mode=input <C-f> text.forward_char
bind --mode=insert <C-f> text.forward_char
bind --mode=ex <C-b> text.backward_char
bind --mode=input <C-b> text.backward_char
bind --mode=insert <C-b> text.backward_char
bind --mode=ex <C-h> text.delete_backward_char
bind --mode=input <C-h> text.delete_backward_char
bind --mode=insert <C-h> text.delete_backward_char
bind --mode=ex <C-d> text.delete_char
bind --mode=input <C-d> text.delete_char
bind --mode=insert <C-d> text.delete_char

" <C-w> for windows / linux does not work;
" so just do not bind it, to get a universal experience.

" use <C-Backspace> to backward_kill_word in all OS; {{{
" this is default on linux / windows }}}
bind --mode=ex <C-Backspace> text.backward_kill_word
bind --mode=input <C-Backspace> text.backward_kill_word
bind --mode=insert <C-Backspace> text.backward_kill_word
bind --mode=ex <C-u> text.backward_kill_line
bind --mode=input <C-u> text.backward_kill_line
bind --mode=insert <C-u> text.backward_kill_line
bind --mode=ex <C-k> text.kill_line
bind --mode=input <C-k> text.kill_line
bind --mode=insert <C-k> text.kill_line

" read novel (with numpad) {{{2
" <Insert> key on Mac cannot be not recognized, according to:
" https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values#editing_keys
" So we add <ContextMenu> which is both recognisable in Firefox and bindable in karabiner.
"
" the following rule should be enabled in karabiner if os is mac:
"   ~/.config/karabiner/assets/complex_modifications/numpad.json

command novel_mode composite \
bind <Enter> scrollpage 0.95; \
bind <Delete> scrollpage -0.95; \
bind + hint -f 下一章; \
bind - hint -f 上一章; \
unbind <Insert>; \
unbind <ContextMenu>; \
bind <Backspace> novel_mode_exit; \
js alert('<Enter> is binded!')

command novel_mode_exit composite \
unbind <Enter>; \
unbind <Delete>; \
unbind +; \
unbind -; \
unbind <Backspace>; \
bind <Insert> novel_mode; \
bind <ContextMenu> novel_mode; \
js alert('<Enter> is un-binded.')

bind <Insert> novel_mode
bind <ContextMenu> novel_mode

" Site Settings {{{1

" this is heavy on CPU, so only use it for specific sites.
seturl www.bing.com/dict preventautofocusjackhammer true

" certain sites are broken. auto enter ignore mode on them.
blacklistadd ^https://docs.google.com/.*/edit

" some general rule:
" - bind c for site specific hint;

" qidian.com {{{
bindurl ^https://www.qidian.com --mode=normal c hint -Jc span.review-count\
,div.chapter-control > a\
,span.j-open-reply\
,div.nav-btn-group > a.nav-btn\
,button.flex.items-center.text-s-gray-500.font-medium.text-s3.mt-8px.h-28px\
,.review-replies-popup > .close-btn
seturl ^https://www.qidian.com hintchars vzcxsda
" don't know why with default hintfiltermode (simple), it's easy to click wrong hint.
" so use vimperator-mode to allow filtering by pressing number (which is in review-count).
seturl ^https://www.qidian.com hintfiltermode vimperator
" }}}

" bilibili.com {{{
bindurl ^https://www.bilibili.com --mode=normal c hint -Jc li.be-tab-item,div.toggle-btn\
,div.list-box > div > div.item.sortable\
,#app > div > aside.left > section.sticky > div > div.bili-dyn-live-users__body > div > div.bili-dyn-live-users__item__right\
,#app > div > aside.right > section.sticky > div > div:nth-child(n)\
,#app > div > main > section:nth-child(2) > div > div.bili-dyn-up-list__window > div > div:nth-child(n)\
,div.view-more > div.view-more-default > span.view-more-btn\
,#app > div > div > div.topic-detail__content > div > div.topic-list > div.list-view.topic-list__flow-list > div:nth-child(1) > div:nth-child(n) > div > div > div.bili-dyn-item__footer > div:nth-child(2) > div
" }}}

" bind c for sub pages {{{
bindurl lobste.rs --mode=normal c hint -bJc span.comments_label > a
bindurl news.ycombinator.com --mode=normal c hint -bJc span.subline > a:nth-child(6)
bindurl old.reddit.com --mode=normal c hint -bJc a.bylink.comments.may-blank

" discourse site
bindurl emacs-china.org|forum.suse.org.cn|ziggit.dev --mode=normal c hint -bJc td.main-link > span > a.title
" }}}

" override binding for some sites {{{
bindurl ^https://www.bilibili.com --mode=normal f hint -Jc div.bpx-player-ctrl-full,div.squirtle-video-fullscreen,\
div.__scale-wrap > a,div.bili-bangumi-card > a,div.bili-article-card__wrap > a,a.rank-ogv-card,a.rank-video-card,a.rank-article-card,a.video-awesome-img
bindurl ^https://www.bilibili.com --mode=normal gf hint -tJc \
div.__scale-wrap > a,div.bili-bangumi-card > a,div.bili-article-card__wrap > a,a.rank-ogv-card,a.rank-video-card,a.rank-article-card,a.video-awesome-img

bindurl protectedtext.com/[^/]+$ f hint -Jc a.ui-tabs-anchor,button.ui-button:enabled
bindurl ^https://www.protopage.com f hint -Jc div.scheme-header-text

" native <Space> blocks sometimes.
bindurl ^https://www.qidian.com --mode=normal <Space> scrollpage 0.97
bindurl ^https://www.qidian.com --mode=normal <S-Space> scrollpage -0.97

" (if we block modal with uBlock Origin)
bindurl (zhuanlan.|)zhihu.com --mode=normal <Space> scrollpage 0.90
bindurl (zhuanlan.|)zhihu.com --mode=normal <S-Space> scrollpage -0.90
" }}}

" site redirection {{{
autocmd DocStart ^http(s?)://www.reddit.com/r/ urlmodify -t www old
" }}}

" toggle dark mode {{{
command toggle-color js ( () => { let target = 'invert(100%)'; let style = document.querySelector('html').style; if (style.filter == target) { style.filter = ''; } else { style.filter = target; } } )()

autocmd DocStart ^https://ziggit.dev toggle-color
" }}}

" Command / Bind override {{{1

" then ":! " and ":!s " also work.
command exclaim js -d€ tri.excmds.composite('magic_define').then(_ => tri.lx.sh(JS_ARGS.join(' '))).then(res => tri.excmds.fillcmdline(res.content))€
command exclaim_quiet js -d€ tri.excmds.composite('magic_define').then(_ => tri.lx.sh(JS_ARGS.join(' ')))€

" fix image search
bind ;m composite hint -Jpipe img src | js -p tri.excmds.open(`https://lens.google.com/uploadbyurl?url=${encodeURIComponent(JS_ARG)}`)
bind ;M composite hint -Jpipe img src | js -p tri.excmds.tabopen(`https://lens.google.com/uploadbyurl?url=${encodeURIComponent(JS_ARG)}`)

bind gi hint input:read-write,textarea:read-write

" Misc {{{1

" read it later (all thing about <C-b>) {{{2

" preview current page.
bind --mode=normal <C-b> js window.location = 'https://www.instapaper.com/text?u=' + encodeURIComponent(window.location.href);

" ... then save it to read list.
bindurl https://www.instapaper.com/text\?u=.* --mode=normal <C-b> hint -Jc .js_read_later

" open instapaper easily. (t <CR> <C-b>)
bindurl moz-extension://.*/static/newtab.html --mode=normal <C-b> open https://www.instapaper.com/u

" ... rapid mode in various site;
" show hint in sibling node instead of target node, so we can see full title.
bindurl https://news.ycombinator.com/(\?p=.*|)$ --mode=normal <C-b> hint -qJc td.votelinks -F e => { tri.excmds.tabopen("-b",'https://www.instapaper.com/text?u=' + encodeURIComponent(e.nextElementSibling.querySelector('span.titleline > a').href)); }
bindurl https://lobste.rs/(page/.*|)$ --mode=normal <C-b> hint -qJc div.voters -F e => { tri.excmds.tabopen("-b",'https://www.instapaper.com/text?u=' + encodeURIComponent(e.nextElementSibling.querySelector('a.u-url').href)); }
bindurl https://www.protopage.com/lxhillwind --mode=normal <C-b> hint -qJc span.feed-widget-headline -F e => { tri.excmds.tabopen("-b",'https://www.instapaper.com/text?u=' + encodeURIComponent(e.parentNode.parentNode.parentNode.href)); }

" quickmark (native) {{{2
command quickmark_fs js -p tri.excmds.composite('magic_define').then(_ => tri.lx.sh(`gvim ~/.tridactylrc +"normal G" +"keeppatterns ?^quickmark " +"r !printf ${btoa(document.location)} | base64 -d" +"normal Iquickmark ${JS_ARG} "`).then(_ => tri.excmds.fillcmdline(`quickmark ${JS_ARG}`)))

bind M gobble 1 quickmark_fs

" qrcode (native) {{{2
" requires qrencode; mpv (macos) / feh (others)

command qrcode js tri.excmds.composite('magic_define').then(_ => tri.lx.sh(`printf ${btoa(document.location)} | base64 -d | qrencode -r /dev/stdin -o - | ${tri.lx.is_mac ? "mpv - --keep-open --geometry=300x300" : "feh -"}`))

bind --mode=visual cq qrcode_visual
command qrcode_visual js let utoa = data => btoa(unescape(encodeURIComponent(data))); tri.excmds.composite('magic_define').then(_ => tri.lx.sh(`printf ${utoa(document.getSelection().toString())} | base64 -d | qrencode -r /dev/stdin -o - | ${tri.lx.is_mac ? "mpv - --keep-open --geometry=300x300" : "feh -"}`))

" custom Menus {{{1
jsb browser.contextMenus.create({ id: "qrcode", title: "生成二维码: 当前网址", contexts: ["page"], });
jsb browser.contextMenus.create({ id: "qrcode_visual", title: "生成二维码: '%s'", contexts: ["selection"], });

" NOTE: avoid addListener repeatedly.
jsb if (tri.lx_menus_listener) browser.contextMenus.onClicked.removeListener(tri.lx_menus_listener); \
tri.lx_menus_listener = (info, tab) => { \
    if (info.menuItemId === "qrcode") { tri.excmds.composite('qrcode'); } \
    if (info.menuItemId === "qrcode_visual") { tri.excmds.composite('qrcode_visual'); }; \
}; browser.contextMenus.onClicked.addListener(tri.lx_menus_listener);

" Private {{{1

quickmark p https://www.protopage.com/lxhillwind
quickmark t https://www.protectedtext.com/lxhillwind

" Load local config and alert for finish {{{1
source ~/.tridactylrc
js alert("tridactylrc loaded.")

" (<Visual>:ctt<Tab>) copy multiline stmt to be use in tridactyl exmode. {{{1 }}}
" vim9 command! -buffer -range CopyToTridactyl @" = getline(<line1>, <line2>)->map((_, line) => line->substitute('[\\]$', '', ''))->join(' ') | feedkeys("\<Space>y")
