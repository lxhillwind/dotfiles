" vim: set filetype=tridactyl
" About {{{1
"
" - ~/.tridactylrc will be sourced at last; it can be used for local config. {{{
"   (see `:help source` in tridactyl about configuration file priority) }}}
"
" - search "A-6" in this file, if OS is windows: we need additional setting.
" - search "ContextMenu" in this file, if OS is mac: we need additional setting.
"
" NOTE: js tri.excmds.unbind in tridactylrc may not work!
"
" firefox plugin setup {{{
" - Tridactyl: :nativeinstall;
" - Simple Tab Groups (stg): bind physical key <A-g> / <A-e> via global preference
"   (they may be different keys in windows (autohotkey) / macos (karabiner),
"   so we cannot set them via `setpref`);
"   "打开弹出窗口": <A-g>; "移动选中标签页到自定义群组": <A-e> }}}
"
" firefox theme setup {{{
" https://codeberg.org/Freeplay/Firefox-Onebar }}}
"
" - \ at end of line is used for line-continuation, see: {{{
" https://github.com/tridactyl/tridactyl/blob/fcdcdc028f01d61589d3e84923f4d3318967c3aa/src/background/config_rc.ts#L61 }}}
"
" - use `seturl` / `bindurl` for speical case.
"
" - vmap fix: even if we use "--mode=normal", the key is vmap-ed;
"   so here is some "unbind --mode=visual " stmt;
"   no need to specify "--mode=normal" when bind.
"
" - base64 (pipe data from js to sh): win32 command line argument length is quite short,
"   so use stdin to pass data if possible;
"   In some case, we need to pass data to gvim (like in ":quickmark_fs"),
"   where stdin does not work.

" Pre {{{1

set configversion 2.0

" WARNING: use this to clear config (binding, etc) in memory.
" reason to do this:
" - if we do not clear config, it is easy to mess up (`:source` won't help);
" - store "temporary config" in file will make it easier to manage.
sanitise tridactyllocal

" Inject our functions to js / jsb. {{{1
" learned this trick from:
"   https://github.com/tridactyl/tridactyl/wiki/Commentary-of-Gholk's-Tridactylrc#reuse-js-code
" search `js_magic` for usage.

command js_magic js \
tri.lx = {}; \
tri.lx.is_win32 = /^Win32/.test(navigator.platform); \
tri.lx.is_mac = /^Mac/.test(navigator.platform); \
tri.lx.is_linux = /^Linux/.test(navigator.platform); \
tri.lx.sh = (...arg) => tri.native.run(...arg); \
if (tri.lx.is_mac) tri.lx.sh = (...arg) => tri.native.run(`export PATH=$(zsh -ic 'echo $PATH'); ${arg[0]}`, ...arg.slice(1)); \
if (tri.lx.is_win32) tri.lx.sh = (...arg) => { let cmd = arg[0]; cmd = cmd.replace(/\\(?=("))/g, '\\\\').replace(/\\$/, '\\\\').replace(/"/g, '\\"'); cmd = '"' + cmd + '"'; cmd = cmd.replace(/([<>^|&()"])/g, '^$1'); return tri.native.run(`busybox sh -c ${cmd}`, ...arg.slice(1)); }; \
;

" copied from js_magic
command js_magic_p js -p \
tri.lx = {}; \
tri.lx.is_win32 = /^Win32/.test(navigator.platform); \
tri.lx.is_mac = /^Mac/.test(navigator.platform); \
tri.lx.is_linux = /^Linux/.test(navigator.platform); \
tri.lx.sh = (...arg) => tri.native.run(...arg); \
if (tri.lx.is_mac) tri.lx.sh = (...arg) => tri.native.run(`export PATH=$(zsh -ic 'echo $PATH'); ${arg[0]}`, ...arg.slice(1)); \
if (tri.lx.is_win32) tri.lx.sh = (...arg) => { let cmd = arg[0]; cmd = cmd.replace(/\\(?=("))/g, '\\\\').replace(/\\$/, '\\\\').replace(/"/g, '\\"'); cmd = '"' + cmd + '"'; cmd = cmd.replace(/([<>^|&()"])/g, '^$1'); return tri.native.run(`busybox sh -c ${cmd}`, ...arg.slice(1)); }; \
;

" copied from js_magic
command js_magic_d js -d● \
tri.lx = {}; \
tri.lx.is_win32 = /^Win32/.test(navigator.platform); \
tri.lx.is_mac = /^Mac/.test(navigator.platform); \
tri.lx.is_linux = /^Linux/.test(navigator.platform); \
tri.lx.sh = (...arg) => tri.native.run(...arg); \
if (tri.lx.is_mac) tri.lx.sh = (...arg) => tri.native.run(`export PATH=$(zsh -ic 'echo $PATH'); ${arg[0]}`, ...arg.slice(1)); \
if (tri.lx.is_win32) tri.lx.sh = (...arg) => { let cmd = arg[0]; cmd = cmd.replace(/\\(?=("))/g, '\\\\').replace(/\\$/, '\\\\').replace(/"/g, '\\"'); cmd = '"' + cmd + '"'; cmd = cmd.replace(/([<>^|&()"])/g, '^$1'); return tri.native.run(`busybox sh -c ${cmd}`, ...arg.slice(1)); }; \
;

jsb tri.excmds.composite('js_magic')

" about:config {{{1

" simple-tab-group cannot recover local (file:// schema) webpages properly,
" if STG is not the last window to close. (last is private window seems fine)
" **
" It may help to show this info in homepage, which gets shown when creating new window
" **
setpref browser.tabs.warnOnClose true

" default 1; set to 3, then last closed tabs get recovered on startup
setpref browser.startup.page 3

" press alt-somekey without opening menu; ff restart required!
setpref ui.key.menuAccessKey 17

" press alt does not focus on menu
setpref ui.key.menuAccessKeyFocuses false

" disable typing / to quick find
setpref accessibility.typeaheadfind.manual false

" make sites' autofocus harder
setpref browser.autofocus false

" required for userChrome.css (Firefox-Onebar)
setpref toolkit.legacyUserProfileCustomizations.stylesheets true

" thin tabbar
setpref browser.uidensity 1

" I don't use pocket
setpref extensions.pocket.enabled false

" General Settings {{{1
set allowautofocus false
set smoothscroll true
set hintchars asdfgqwertzxcv
set modeindicatorshowkeys true
set followpagepatterns {"next":"^(next|newer|下一章|下一篇|下一页)\\b|»|>>|more","prev":"^(prev(ious)?|older|上一章|上一篇|上一页)\\b|«|<<"}
set tabopencontaineraware true
" tabo default alias (tabonly) is dangerous, so let's remap it.
alias tabo tabopen

" Security {{{1
" default binding p / P (if content in clipboard does not look like url, then
" search it) is dangerous; so use a blank search engine as default.
set searchengine blank
set searchurls.blank http://localhost/maybe-pressed-wrong-key?%s

" Search Engine {{{1
set searchurls.bd https://www.baidu.com/s?wd=%s
set searchurls.bg https://www.bing.com/search?q=%s&ensearch=1
set searchurls.bl https://search.bilibili.com/all?keyword=%s
set searchurls.cd https://www.iciba.com/word?w=%s
set searchurls.cnf https://command-not-found.com/%s
set searchurls.co https://www.collinsdictionary.com/english/%s
set searchurls.dg https://duckduckgo.com/?q=%s
set searchurls.gd https://drive.google.com/drive/search?q=%s
set searchurls.gh https://github.com/search?utf8=✓&type=repositories&q=%s
set searchurls.gg https://www.google.com/search?q=%s&hl=en_US
set searchurls.ip https://www.ip138.com/iplookup.asp?ip=%s&action=2
set searchurls.man https://man.archlinux.org/search?q=%s&go=Go
set searchurls.man-a https://man.archlinux.org/search?q=%s
set searchurls.man-u https://manpages.ubuntu.com/cgi-bin/search.py?q=%s
set searchurls.pkg https://pkgs.org/search/?q=%s
set searchurls.r https://old.reddit.com/r/%s
set searchurls.sh http://symbolhound.com/?q=%s
set searchurls.tr http://webtrans.yodao.com/webTransPc/index.html?from=en&to=zh-CHS&type=2&url=%s
set searchurls.wk https://www.wikipedia.org/w/index.php?title=Special:Search&search=%s
set searchurls.yh https://search.yahoo.com/search?q=%s

" Default Binding can be viewed here: {{{1
" moz-extension://<replace-with-extension-id>/static/docs/classes/_src_lib_config_.default_config.html
" (**open it with firefox**; get this by `:help` then read the second paragraph.)
"
" tridactyl takes 100ms for every excmd, so we do re-bind default binding
" here to speedup loading.
" https://github.com/tridactyl/tridactyl/issues/1409#issuecomment-581299773

" Binds {{{1
bind x tabclose
bind X undo
bind d scrollpage 0.5
bind u scrollpage -0.5
" j / k: default (10) too much.
bind j scrollline 5
bind k scrollline -5
bind gs viewsource
" -J to hide javascript hints; they usually make hint names not unique.
bind f hint -J
bind F hint -Jb
bind gf hint -Jt
bind gp pin
bind gm mute toggle
bind m gobble 1 markadd
" default is `, which is hard to press in most 60% keyboard.
bind ' gobble 1 markjump
bind gC tabduplicate
bind gr reader
bind yq text2qr --popup

bind ZZ js alert("before closing window, ensure STG is the last window!")

" make <Escape> able to exit simple-tab-group's switch group page.
unbind --mode=normal <Escape>

" this is quite handy.
" I don't know if it is default... just record it here.
bind --mode=browser <C-6> tab #

" in windows, <A-1> - <A-9> can not be used to navigate tab (it's ok in linux); {{{
" so we map <A-1> - <A-9> to <C-1> - <C-9> with ahk to make them work.
"
" after using tridactyl, <C-6> should be used as <C-^> (like in vim);
" so we bind <C-6> to <A-6> in ahk, then <C-6> and <A-6> produce different keys:
"
" When we pressing <A-6>, <C-6> is recognized by firefox, so <C-6> should be unbind.
"
" But tridactylrc is used in different OS,
" so we need to put these in ~/.tridactylrc only if using Windows:
"
"    bind --mode=browser <A-6> tab #
"    unbind <C-6>
"    unbind --mode=browser <C-6>
" }}}

" search with...
bind s composite js " " + document.location.href.toString() | fillcmdline open ; text.beginning_of_line ; text.forward_word ; text.forward_char
bind S composite js " " + document.location.href.toString() | fillcmdline tabopen ; text.beginning_of_line ; text.forward_word ; text.forward_char
bind --mode=visual s composite js " " + document.getSelection().toString() | fillcmdline open ; text.beginning_of_line ; text.forward_word ; text.forward_char
bind --mode=visual S composite js " " + document.getSelection().toString() | fillcmdline tabopen ; text.beginning_of_line ; text.forward_word ; text.forward_char

" do not use bmark, and we use `af` as binding; so unbind a / A.
unbind a
unbind A

" create duplicated binding for muscle memory.
bind yf hint -Jy
bind af hint -Jqb

" yank (ip)
bind y1 composite js document.location.hostname | clipboard yank
" yank (ip:port)
bind y2 composite js document.location.host | clipboard yank
" yank (url decoded)
bind yY composite js decodeURI(document.location) | clipboard yank
" yank image url
bind yi composite hint -Jpipe img src | js -p if (JS_ARG) tri.excmds.clipboard('yank', JS_ARG)

" unbind some keys for firefox's native function {{{2
unbind <C-f>
unbind <C-b>
unbind <C-a>
unbind <C-x>
unbind <C-o>
unbind <C-d>
unbind <C-u>
" <C-i> in input / insert mode should be kept (edit-with-vim)
unbind --mode=normal <C-i>

" readline {{{2
" <C-/> as select_all works natively on GTK (linux) (without bind).
" - TODO: test if select_all (<C-/>) work for windows.
" - TODO: impl select_all for ex mode.
" custom select_all in ex mode won't work: {{{
"bind --mode=ex <C-/> js document.activeElement.select()
" }}}
bind --mode=input <C-/> js document.activeElement.select()
bind --mode=insert <C-/> js document.activeElement.select()
bind --mode=ex <C-a> text.beginning_of_line
bind --mode=input <C-a> text.beginning_of_line
bind --mode=insert <C-a> text.beginning_of_line
bind --mode=ex <C-e> text.end_of_line
bind --mode=input <C-e> text.end_of_line
bind --mode=insert <C-e> text.end_of_line
bind --mode=ex <C-f> text.forward_char
bind --mode=input <C-f> text.forward_char
bind --mode=insert <C-f> text.forward_char
bind --mode=ex <C-b> text.backward_char
bind --mode=input <C-b> text.backward_char
bind --mode=insert <C-b> text.backward_char
bind --mode=ex <C-h> text.delete_backward_char
bind --mode=input <C-h> text.delete_backward_char
bind --mode=insert <C-h> text.delete_backward_char
bind --mode=ex <C-d> text.delete_char
bind --mode=input <C-d> text.delete_char
bind --mode=insert <C-d> text.delete_char

" <C-w> for windows / linux does not work;
" so just do not bind it, to get a universal experience.

" use <C-Backspace> to backward_kill_word in all OS; {{{
" this is default on linux / windows }}}
bind --mode=ex <C-Backspace> text.backward_kill_word
bind --mode=input <C-Backspace> text.backward_kill_word
bind --mode=insert <C-Backspace> text.backward_kill_word
bind --mode=ex <C-u> text.backward_kill_line
bind --mode=input <C-u> text.backward_kill_line
bind --mode=insert <C-u> text.backward_kill_line
bind --mode=ex <C-k> text.kill_line
bind --mode=input <C-k> text.kill_line
bind --mode=insert <C-k> text.kill_line

" <C-i> in exmode to edit cmdline with editor {{{2
bind --mode=ex <C-i> js tri.editor.beginning_of_line(); tri.editor.insert_text('edit_cmdline '); tri.excmds.composite('ex.accept_line')
" slice(1): JS_ARGS[0] is `""`, which is not needed;
" printf "XXX": XXX may be empty, so quote it.
command edit_cmdline js_magic_d let utoa = data => btoa(unescape(encodeURIComponent(data))); tri.lx.sh(`tmpfile=$(mktemp); base64 -d > "$tmpfile"; gvim -f "$tmpfile"; cat "$tmpfile" && rm -- "$tmpfile"`, utoa(JS_ARGS.slice(1).join(' '))).then(res => tri.excmds.fillcmdline(res.content))●

" read novel (with numpad) {{{2
" <Insert> key on Mac cannot be not recognized, according to:
" https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values#editing_keys
" So we add <ContextMenu> which is both recognisable in Firefox and bindable in karabiner.
"
" the following rule should be enabled in karabiner if os is mac:
"   ~/.config/karabiner/assets/complex_modifications/numpad.json

command novel_mode composite \
bind <Enter> scrollpage 0.95; \
bind <Delete> scrollpage -0.95; \
bind + hint -f 下一章; \
bind - hint -f 上一章; \
bind <Insert> reload; \
unbind <ContextMenu>; \
bind <Backspace> novel_mode_exit; \
js alert('<Enter> is binded!')

command novel_mode_exit composite \
unbind <Enter>; \
unbind <Delete>; \
unbind +; \
unbind -; \
unbind <Backspace>; \
bind <Insert> novel_mode; \
bind <ContextMenu> novel_mode; \
js alert('<Enter> is un-binded.')

bind <Insert> novel_mode
bind <ContextMenu> novel_mode

" Site Settings {{{1

" If input is broken: {{{
" If we want to avoid page stealing input on load, then
" "preventautofocusjackhammer" may be used; but be aware that it costs high cpu.

" If normal mode is preferred, but stealing focus from (non-standard) input should be allowed.
"   aws / aliyun console: these are only used to illustrate how to set;
" more sites (instances): grafana, ant design; (no fixed url, so set in ~/.tridactylrc)
seturl ^https://.*console.aws.amazon.com allowautofocus true
seturl ^https://.*console.aliyun.com allowautofocus true
seturl ^https://.*console.alibabacloud.com allowautofocus true

" Some sites steal input heavily. auto enter ignore mode on them.
blacklistadd ^https://docs.google.com/.*/edit

" If input should be completely controlled by page, like in vnc / rdp site, then
" "superignore" may be used. NOTE that <C-,> won't work there.
" }}}

" some general rule:
" - bind c for site specific hint;

" qidian.com {{{
bindurl ^https://www.qidian.com c hint -Jc span.review-count\
,div.chapter-control > a\
,span.j-open-reply\
,div.nav-btn-group > a.nav-btn\
,button.flex.items-center.text-s-gray-500.font-medium.text-s3.mt-8px.h-28px\
,.review-replies-popup > .close-btn
seturl ^https://www.qidian.com hintchars vzcxsda
" don't know why with default hintfiltermode (simple), it's easy to click wrong hint.
" so use vimperator-mode to allow filtering by pressing number (which is in review-count).
seturl ^https://www.qidian.com hintfiltermode vimperator
" }}}

" bilibili.com {{{
bindurl ^https://(search|www).bilibili.com c hint -f 点击查看
" }}}

" bind c for sub pages {{{
bindurl github.com c hint -bJc li h4:nth-child(1) > span:nth-child(1) > a:nth-child(1),a.issue-link,a[id^="issue"][id$="link"],h3.markdown-title a,a.markdown-title,a[class^="IssuePullRequestTitle"]
bindurl lobste.rs c hint -bJc span.comments_label > a
bindurl news.ycombinator.com c hint -bJc span.subline > a:nth-child(6)
bindurl old.reddit.com c hint -bJc a.bylink.comments.may-blank
bindurl v2ex.com c hint -bJc a.topic-link,span.item_hot_topic_title a

" discourse site
autocmd DocLoad .* js if (document.querySelector('tbody.topic-list-body')) tri.excmds.bindurl(document.location.href, 'c', 'hint -bJc td.main-link > span > a.title')
 " }}}

" bind c to close popup {{{
bindurl tieba.baidu.com c hint -Jc span.close-btn
bindurl zhihu.com c hint -Jc button[aria-label="关闭"]
" }}}

" bind c to click on some button {{{
bindurl https://netcut.cn/ c hint -fr ^(读取)$
bindurl protectedtext.com/[^/]+$ c hint -Jc a.ui-tabs-anchor,button.ui-button:enabled
bindurl ^https://www.protopage.com c hint -Jc td > div.scheme-header-text
" }}}

" override binding for some sites {{{
bindurl ^https://(search|www).bilibili.com f hint -Jc \
div.__scale-wrap > a,div.bili-bangumi-card > a,div.bili-article-card__wrap > a\
,a.bili-video-card__image--link\
,div.bili-video-card__wrap > a\
,a.rank-ogv-card,a.rank-video-card,a.rank-article-card\
,li.history-record a.title\
,a.video-awesome-img,div.framepreview-box > a.box-a\
,div.bpx-player-ctrl-full,div.squirtle-video-fullscreen,i.history-delete\
 -F e => { if (/bilibili.com\/((video)|(bangumi\/play))\//.test(e.href)) tri.excmds.open(e.href); else e.click(); }

bindurl ^https://(search|www).bilibili.com F hint -bJc \
div.__scale-wrap > a,div.bili-bangumi-card > a,div.bili-article-card__wrap > a\
,a.bili-video-card__image--link\
,div.bili-video-card__wrap > a\
,a.rank-ogv-card,a.rank-video-card,a.rank-article-card\
,li.history-record a.title\
,a.video-awesome-img,div.framepreview-box > a.box-a\
,video.wrong-match-to-align-with-above

" native <Space> blocks sometimes.
bindurl ^https://www.qidian.com <Space> scrollpage 0.97
bindurl ^https://www.qidian.com <S-Space> scrollpage -0.97

" (if we block modal with uBlock Origin)
bindurl (zhuanlan.|)zhihu.com <Space> scrollpage 0.90
bindurl (zhuanlan.|)zhihu.com <S-Space> scrollpage -0.90
" }}}

" navigation fix for some sites {{{
" bing.com
autocmd DocLoad ^https?://(www|cn).bing.com/search js (document.querySelector('li > a[aria-label="Next page"]') || {}).rel = "next"; (document.querySelector('li > a[aria-label="Previous page"]') || {}).rel = "prev"

" baidu.com: page button is not generated yet when `DocLoad`, so not able to set like bing.com.
bindurl ^https?://www.baidu.com/s\? [[ js document.querySelectorAll('div#page a.n').forEach(i => /上一页/.test(i.innerText) && i.click())
bindurl ^https?://www.baidu.com/s\? ]] js document.querySelectorAll('div#page a.n').forEach(i => /下一页/.test(i.innerText) && i.click())
" }}}

" site redirection {{{
autocmd DocStart ^http(s?)://www.reddit.com/r/ urlmodify -t www old
" }}}

" toggle dark mode {{{
command toggle-color js ( () => { let target = 'invert(100%)'; let style = document.querySelector('html').style; if (style.filter == target) { style.filter = ''; document.querySelectorAll('img').forEach(i => { i.style.filter = ''; }) } else { style.filter = target; document.querySelectorAll('img').forEach(i => { i.style.filter = target; }); } } )()

" as an example; commented out as it supports light color now (2024-06-08).
"autocmd DocLoad ^https://ziggit.dev toggle-color
" }}}

" Command / Bind override {{{1

" then ":! " and ":!s " also work.
command exclaim js_magic_d tri.lx.sh(JS_ARGS.join(' ')).then(res => tri.excmds.fillcmdline(res.content))●
command exclaim_quiet js_magic_d tri.lx.sh(JS_ARGS.join(' '))●

" fix image search
bind ;m composite hint -Jpipe img src | js -p if (JS_ARG) tri.excmds.open(`https://lens.google.com/uploadbyurl?url=${encodeURIComponent(JS_ARG)}`)
bind ;M composite hint -Jpipe img src | js -p if (JS_ARG) tri.excmds.tabopen(`https://lens.google.com/uploadbyurl?url=${encodeURIComponent(JS_ARG)}`)

# this is broken in 1.24.2; so use default behavior.
# bind gi hint input:read-write,textarea:read-write
bind gi focusinput -l

" Misc {{{1

" unbind visual c and bind it for function {{{2
unbind --mode=visual c

" easy translation
bind --mode=visual cd composite js "cd " + document.getSelection().toString() | tabopen

" some others defined below; like cq

" read it later (all thing about <C-b> / ;b) {{{2

" save url in local file
bind <C-b> js_magic let url = document.URL; if (/^moz-extension:.*reader.html#.*/.test(url)) { url = document.head.querySelector('#tricanonlink').href; } let utoa = data => btoa(unescape(encodeURIComponent(data))); let title = document.title; let text = title ? ('- `' + title + '`' + `\n <${url}>`) : `- <${url}>`; tri.lx.sh(`gvim ~/notes-local/read-it-later/"$(hostname)".md +"normal zRG" +"r !printf ${utoa(text)} | base64 -d"`)

" ... rapid mode in various site;
" show hint in sibling node instead of target node, so we can see full title.
bindurl https://news.ycombinator.com/(news|)(\?p=.*|)$ <C-b> hint -qJc td.votelinks -F e => { tri.excmds.tabopen("-b", e.nextElementSibling.querySelector('span.titleline > a').href); }
bindurl https://lobste.rs/(page/.*|)$ <C-b> hint -qJc div.voters -F e => { tri.excmds.tabopen("-b", e.nextElementSibling.querySelector('a.u-url').href); }
bindurl https://www.protopage.com/lxhillwind <C-b> hint -qJc span.feed-widget-headline -F e => { tri.excmds.tabopen("-b", e.parentNode.parentNode.parentNode.href); }

unbind --mode=visual <C-b>

" quickmark (native) {{{2
command quickmark_fs js_magic_p if (/^[a-zA-Z0-9]$/.test(JS_ARG)) tri.lx.sh(`gvim ~/.tridactylrc +"normal G" +"keeppatterns ?^quickmark " +"r !printf ${btoa(document.location)} | base64 -d" +"normal Iquickmark ${JS_ARG} "`).then(_ => tri.excmds.fillcmdline(`quickmark ${JS_ARG}`))

bind M gobble 1 quickmark_fs

" qrcode {{{2
" Why using qrcode_visual, instead of using text2qr directly? {{{
" because if we did that, then in visual mode, contextMenus gen qrcode won't
" work as expected: it will gen qrcode for current url instead of selection. }}}
command qrcode js -d● let text = document.location.toString(); if (JS_ARGS.length > 1) { if (JS_ARGS.length === 2 && JS_ARGS[1] === 'qrcode_visual') text = document.getSelection().toString(); else text = JS_ARGS.join(' '); } tri.excmds.text2qr('--popup', text)●
command qrcode_visual qrcode qrcode_visual
bind --mode=visual cq qrcode_visual

" edit selection in vim (native) {{{2
bind --mode=visual <C-i> js_magic tri.lx.sh(`gvim -f -`, document.getSelection().toString())

" notepad (add selection and url to a text file) (native) {{{2
command save_notes js_magic let utoa = data => btoa(unescape(encodeURIComponent(data))); let text = "\n\n---\n\n" + `[${document.title}](${document.location})` + "\n\n" + document.getSelection().toString(); tri.lx.sh(`gvim ~/notes-local/read-it-later/"$(hostname)"-clip.txt +"norm G" +"silent r !printf ${utoa(text)} | base64 -d"`)
bind --mode=visual cs save_notes

" generate rss file to be used by newsboat directly (native) {{{2
" why not using rss?
" because some sites don't support rss; some sites require login.

" usage call tri.lx.to_rss with following args:
" arg 1: shell-safe file basename (WE WILL NOT CHECK!)
" arg 2: title / link / description (default: title)
" arg 3-?: title / link / description (default: title) / guid (default: link)
"
" file will be created in /tmp/rss-from-tridactyl/

command js_rss js_magic tri.lx.to_rss = (arg) => { \
let escape = (s) => s.replace(/[&]/g, '&amp;').replace(/[<]/g, '&lt;').replace(/[>]/g, '&gt;'); \
let utoa = data => btoa(unescape(encodeURIComponent(data))); \
let result = ''; \
let head = arg[1]; \
result += `<rss version="2.0">`; \
result += ` <channel>`; \
result += `  <title>${escape(head.title)}</title>`; \
result += `  <link>${escape(head.link)}</link>`; \
result += `  <description>${escape(head.description ?? head.title)}</description>`; \
for (let item of arg.slice(2)) { \
    result += `  <item>`; \
    result += `   <title>${escape(item.title)}</title>`; \
    result += `   <link>${escape(item.link)}</link>`; \
    result += `   <description>${escape(item.description ?? item.title)}</description>`; \
    result += `   <guid>${escape(item.guid ?? item.link)}</guid>`; \
    result += `  </item>`; \
} \
result += ` </channel>`; \
result += `</rss>`; \
tri.lx.sh(`mkdir -p /tmp/rss-from-tridactyl; base64 -d > /tmp/rss-from-tridactyl/${arg[0]}`, utoa(result)); \
};

" a real world example:
"autocmd DocLoad ^https://emacs-china.org/$ js_rss ( () => { let args = ['emacs-china.xml', {title: document.title, link: document.URL}]; document.querySelectorAll('table tbody.topic-list-body tr').forEach((i) => { if (i.querySelector('a.title')) args.push({title: i.querySelector('a.title').innerText + ' (' + i.querySelector('span.number').innerText + ')', link: i.querySelector('a.title').href}); }); tri.lx.to_rss(args); } )()

" discourse sites have similar css structure, so add a function for them:
" usage: add "(", pass file_basename as arg, and add ")".
command js_rss_discourse js_rss ( (file_basename) => { let args = [file_basename, {title: document.title, link: document.URL}]; document.querySelectorAll('table tbody.topic-list-body tr').forEach((i) => { if (i.querySelector('a.title')) args.push({title: i.querySelector('a.title').innerText + ' (' + i.querySelector('span.number').innerText + ')', link: i.querySelector('a.title').href}); }); tri.lx.to_rss(args); } )

autocmd DocLoad ^https://emacs-china.org/$ js_rss_discourse ('emacs-china.xml')
autocmd DocLoad ^https://forum.suse.org.cn/$ js_rss_discourse ('suse-forum-cn.xml')
autocmd DocLoad ^https://ziggit.dev/$ js_rss_discourse ('ziggit.xml')

" custom Menus {{{1
jsb tri.lx = tri.lx ?? {}
jsb tri.lx.menus = tri.lx.menus ?? {}
" object key is id;
" and if `excmd` is not in value, id is also excmd.
" To unset an entry, just assign value to null / undefined, then `refresh_menu`.
jsb tri.lx.menus.qrcode = { title: "生成二维码: 当前网址", contexts: ["page"], }
jsb tri.lx.menus.qrcode_visual = { title: "生成二维码: '%s'", contexts: ["selection"], }
jsb tri.lx.menus.save_notes = { title: "保存笔记...: '%s'", contexts: ["selection"], }
jsb tri.lx.menus.refresh_menu = { title: "刷新上下文菜单", contexts: ["page"], }

command refresh_menu jsb \
    if (tri.lx.menus_listener) \
        browser.contextMenus.onClicked.removeListener(tri.lx.menus_listener); \
    browser.contextMenus.removeAll().then(_ => \
        Object.entries(tri.lx.menus).forEach(([key, val]) => { \
            if (val) browser.contextMenus.create({ id: key, title: val.title, contexts: val.contexts, }) \
    })); \
    tri.lx.menus_listener = (info, tab) => { \
        let val = tri.lx.menus[info.menuItemId]; \
        if (val) { tri.excmds.composite(val.excmd ?? info.menuItemId); } \
    }; browser.contextMenus.onClicked.addListener(tri.lx.menus_listener)

" Private {{{1

quickmark p https://www.protopage.com/lxhillwind
quickmark s http://127.0.0.1:8384/

" Load local config, setup ContextMenu, and alert for finish {{{1
source ~/.tridactylrc
refresh_menu
js alert("tridactylrc loaded.")

" (<Visual>:ctt<Tab>) copy multiline stmt to be use in tridactyl exmode. {{{1 }}}
" command! -range CopyToTridactyl vim9 getline(<line1>, <line2>)->map((_, line) => line->substitute('[\\]$', '', ''))->join(' ')->setreg('') | call feedkeys("\<Space>y")
