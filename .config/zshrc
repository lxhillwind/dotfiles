#!/usr/bin/env false
# vim:fdm=marker
# path: ~/.zshrc

# info {{{1
# # Description
# shell env | rc file.
#
# # Usage
# source it, with shell's builtin command `source` or `.`.
#
# To use it in busybox ash (or other strict POSIX shell),
# just set environment variable `ENV` to point to this file.
# (`man 1p sh` for details)
#
# # Compatibility
# This file is compatible with POSIX shell
# (it will return only if it meets feature which is not available).
#
# If `ls` alias does not work (BSD ls, for example),
# just unalias / re-alias it after source this file.

# env {{{1
export EDITOR=vim

case "$PATH" in
    /usr/bin:*|*:/usr/bin:*) ;;
    *) export PATH=/usr/bin:$PATH ;;
esac

case "$PATH" in
    ~/bin:*|*:~/bin:*) ;;
    *) export PATH=~/bin:$PATH ;;
esac

case "$PYTHONPATH" in
    ~/lib/python:*|*:~/lib/python) ;;
    *) export PYTHONPATH=~/lib/python:$PYTHONPATH ;;
esac

# fzf
export FZF_DEFAULT_OPTS='--cycle --no-sort --color=16'

# finish if not interactive {{{1
case "$-" in
    *i*) ;;
    *) return 2>/dev/null || exit 1 ;;
esac

# rc {{{1
# colorful man {{{2
man() {
    # openSUSE requires MAN_POSIXLY_CORRECT to display without prompt.
    # openSUSE requires GROFF_NO_SGR to display color (but why?).
    # ref: https://forums.opensuse.org/showthread.php/414983-Color-Man-Pages/page2?s=7bff9fc804859ecde549a354ecaacea0
    env \
    MAN_POSIXLY_CORRECT=1 \
    GROFF_NO_SGR=yes \
    LANG=en_US.UTF-8 \
    PAGER="sh -c 'sed -E \"s/[—−‐]/-/g\" | less'" \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

# some short alias & functions {{{2
alias exa='exa -F --color=always'
alias less='less -R'
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias ls='ls --color=auto -F'
alias pq='proxychains -q'

# busybox can only set rc by $ENV, so source local config if exists. {{{2
if [ -n "$ENV" ] && [ -n "$SH_RC_LOCAL" ] && [ -r "$SH_RC_LOCAL" ]; then
    source "$SH_RC_LOCAL"
fi

# simple PS1 (zsh re-defines it) {{{2
PS1='\[\e[1m\]\[\e[31m\]$(x=$?; test $x -eq 0 || echo "[$x] ")\[\e[32m\][$(date +%Y-%m-%d\ %H:%M:%S)] \[\e[33m\]\w'$'\n''\[\e[32m\]\$\[\e[0m\] '

# load vim-vimserver related setting after PS1. {{{2
# see lxhillwind/vim-vimserver
if [ -f "$VIMSERVER_SH_SOURCE" ]; then
    source "$VIMSERVER_SH_SOURCE"
fi

# finish if not zsh {{{2
# Following code may cause syntax error in strict POSIX shell
# (like array construction), so return early.
if ! command -v zstyle >/dev/null; then
    return
fi

# zshrc {{{1
# Command completion {{{2
typeset -U fpath
fpath=(~/.zsh_comp $fpath[@])
autoload -Uz compinit promptinit

# arrow-key driven autocompletion
zstyle ':completion:*' menu select

# history; TODO allow skip history {{{2
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# cd {{{2
export DIRSTACKSIZE=16
setopt auto_pushd pushd_ignore_dups pushd_minus

# cd enhancement; with function j() {{{2
_cd_history() {
    if [[ $PWD != $_cd_history_last ]]; then
        if [[ -v _cd_history_last ]]; then
            printf '%s\n' "$PWD" >> ~/.cache/cd_history
        fi
        _cd_history_last="$PWD"
    fi
}

precmd_functions+=(_cd_history)

j() {
    prefix=$1
    if [ -n "$prefix" ]; then
        prefix=$({ cd "$prefix" && pwd; } 2>&1)
    fi
    if [[ $(wc -l ~/.cache/cd_history | awk '{ print $1 }') -gt 10000 ]]; then
        echo 'warning: cd history (~/.cache/cd_history) too large!' >&2
    fi
    s=$(sort ~/.cache/cd_history | uniq -c | sort -nk1 | sed -E 's/^\s*[0-9]+\s*//' \
        | grep -F "$prefix" \
        | { while read x; do if [ -d "$x" ]; then echo "$x"; fi; done; } \
        | fzf --tac +s -0)

    # return if <C-d> / <C-c>.
    if [ $? -eq 130 ]; then
        return 0
    fi

    if ! [ -t 1 ]; then
        if [ -n "$s" ]; then
            printf '%s\n' "$s"
        fi
        return
    fi

    if [ -n "$s" ]; then
        cd "$s"
    else
        printf 'not found; using fzf? (from ~/) [y/N] ' >&2
        if read -q >&/dev/null; then
            prefix="${prefix:-$HOME}"
            file=$(cd "$prefix" && fzf)
            file="$prefix/${file%/*}"
            if [ -e "$file" ]; then
                cd "$file"
            fi
        fi
    fi
}

# vi insert mode {{{2
bindkey -v \^A beginning-of-line
bindkey -v \^E end-of-line
bindkey -v \^F forward-char
bindkey -v \^B backward-char
bindkey -v \^N down-line-or-history
bindkey -v \^P up-line-or-history
bindkey -v \^D delete-char-or-list
bindkey -v \^H backward-delete-char
bindkey -v \^U backward-kill-line
bindkey -v \^K kill-line
bindkey -v \^W backward-kill-word
bindkey -v \^Y yank

zle-keymap-select()
{
    case $KEYMAP in
        vicmd) print -n '\e[1 q' ;;  # block cursor
        viins|main) print -n '\e[5 q' ;;  # less visible cursor
    esac
}
zle -N zle-keymap-select

# TODO load on `set -o emacs`
_fix_cursor()
{
    print -n '\e[1 q'
}

# readline keybindings {{{2
bindkey -e
bindkey \^U backward-kill-line

# '#' at begin-of-line as comment
setopt interactivecomments

# simple PS1 {{{2
PS1='%B%(?..%F{red}[%?] )%F{green}[%D{%Y-%m-%d %H:%M:%S}] %F{yellow}%~'$'\n''%F{green}%#%f%b '

# edit command line (C-x C-e) {{{2
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey \^x\^e edit-command-line

# capture term output, pipe to vim (easy jump); func: sv() {{{2
# optional $1: start line from visible top; default: 1000
if [ -n "$TMUX" ]; then
sv()
{
    tmux capture -e -p -S -${1:-0} -E $(tmux display -p "#{cursor_y}") | vim - -c 'set buftype=nofile noswapfile | %Terminal cat'
}
fi

if [ -n "$DTACH_SESSION_FILE" ]; then
sv()
{
    dtach-session $1 | vim - -c 'set buftype=nofile noswapfile | %Terminal cat'
}
fi

if [ -n "$VIMSERVER_BIN" ]; then
sv()
{
    "$VIMSERVER_BIN" "$VIMSERVER_ID" Tapi_shell_sv_helper
}
fi

# finish. {{{2
compinit

# TODO merge into zshrc block above. {{{1
alias o=xdg-open

export MPD_HOST=~/.mpd/socket

# x11 / wayland; func: s() or x() {{{2
if [ -z "$WAYLAND_DISPLAY" ] && [ -z "$DISPLAY" ]; then
    _common() {
        export GTK_IM_MODULE=fcitx
        export QT_IM_MODULE=fcitx
        export XMODIFIERS=@im=fcitx
        # start mpd (without daemon) in background, so it works with bwrap's
        # --die-with-parent param.
        # start mpd via xdg autostart.
        #[ -s ~/.mpd/pid ] || mpd --no-daemon &!
    }
    _start-wayland() {
        XDG_SESSION_TYPE=wayland dbus-run-session startplasma-wayland
    }
    _s() {
        _common
        export QT_QPA_PLATFORM=wayland
        export SDL_VIDEODRIVER=wayland
        _start-wayland
    }

    x() {
        # plasma has its own value.
        export QT_QPA_PLATFORMTHEME=qt5ct
        _common
        startx
    }

    s() {
        (_s)
    }
fi
