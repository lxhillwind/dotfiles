#!/usr/bin/env false
# vim:fdm=marker

# about this file {{{1
# # Description
# shell env | rc file.
#
# # Usage
# source it, with shell's builtin command `source` or `.`.
#
# To use it in busybox ash (or other strict POSIX shell),
# just set environment variable `ENV` to point to this file.
# (`man 1p sh` for details)
#
# # Compatibility
# This file is compatible with POSIX shell
# (it will return only if it meets feature which is not available).
#
# If `ls` alias does not work (BSD ls, for example),
# just unalias / re-alias it after source this file.

# environment variable {{{1
export EDITOR=vim

case "$PATH" in
    /usr/bin:*|*:/usr/bin:*) ;;
    *) export PATH=/usr/bin:$PATH ;;
esac

case "$PATH" in
    ~/bin:*|*:~/bin:*) ;;
    *) export PATH=~/bin:$PATH ;;
esac

# bat
# git-delta theme is also controlled by `BAT_THEME`.
export BAT_THEME=ansi

# enable fcitx in kitty.
# https://github.com/kovidgoyal/kitty/issues/469
export GLFW_IM_MODULE=ibus

# mpd
export MPD_HOST=~/.mpd/socket

# finish if not interactive {{{1
case "$-" in
    *i*) ;;
    *) return 2>/dev/null || exit 1 ;;
esac

# rc {{{1
# man(): colorful man {{{2
man() {
    # openSUSE requires MAN_POSIXLY_CORRECT to display without prompt.
    # openSUSE requires GROFF_NO_SGR to display color (but why?).
    # ref: https://forums.opensuse.org/t/color-man-pages/27729
    env \
    MAN_POSIXLY_CORRECT=1 \
    GROFF_NO_SGR=yes \
    LANG=en_US.UTF-8 \
    PAGER="sh -c 'sed -E \"s/[—−‐]/-/g; s/ˆ/^/g; s/˜/~/g; s/[‘’]/'\''/g; \" | less'" \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

# some short alias & functions {{{2
alias less='less -R'
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias ls='ls --color=auto -F'
alias pq='proxychains -q'
tmp() { vim "+Scratch $*"; }

# OSTYPE is defined by bash / zsh; OS is defined by win32 OS.
case "${OSTYPE:-$OS}" in
    Windows_NT)
        alias o='cmd /s /c start ""'
        ;;
    *darwin*)
        alias o=open
        ;;
    *)
        alias o=xdg-open
        ;;
esac

# simple PS1 (zsh re-defines it) {{{2
# TODO openSUSE busybox-static sh handle PS1 buggy?
PS1='\[\e[1m\]\[\e[31m\]$(x=$?; test $x -eq 0 || echo "[$x] ")\[\e[32m\][$(date +%Y-%m-%d\ %H:%M:%S)] \[\e[33m\]\w'$'\n''\[\e[32m\]\$\[\e[0m\] '

# sv(): run the last command in vim (for easy goto) {{{2
case "$0" in
    # only bash / zsh support `fc`; busybox does not.
    *bash*|*zsh*)
        sv()
        {
            local cmd="$(fc -n -l -1 -1)"
            # remove '\t ' prefix for bash.
            cmd="${cmd#$'\t' }"
            case "$cmd" in
                rg\ *)
                    cmd="Rg ${cmd##rg }"
                    ;;
                *)
                    cmd="Sh -t= ${cmd}"
                    ;;
            esac
            env VIM_CMD="$cmd" vim -c 'call feedkeys(":" .. $VIM_CMD, "n")'
        }
        ;;
    *)
        ;;
esac

# l: emulate lf's auto cd on finish {{{2
l()
{
    local LF_TARGET="$(mktemp)"
    if [ $? -ne 0 ]; then
        return 1
    fi
    LF_SELECT="$1" LF_TARGET="$LF_TARGET" vim +LfMain
    local x="$(cat -- "$LF_TARGET")"
    rm -- "$LF_TARGET"
    if [ -z "$x" ]; then
        # if lf.vim gives error, then "$x" will be empty.
        return 0
    fi
    if [ "$x" != "$PWD" ] && [ "$x" != "$PWD"/ ]; then
        # $PWD may contain final /, if it's in directory root
        # (also consider busybox-w32 UNC path, where $PWD may contain many /);
        # $x (from lf.vim) always has final /;
        # so to check if dir changes, just compare $x with $PWD and "$PWD"/.
        cd "$x"
    fi
}

# vim's Cdproject / Cdp in shell {{{2
Cdproject()
{
    local x=$(git rev-parse --show-toplevel)
    if [ -z "$x" ]; then
        # use git's return code.
        return 128
    fi
    cd "$x"
    if [ $# -gt 0 ]; then
        "$@"
        local x=$?
        cd - >/dev/null
        return $x
    fi
}

alias Cdp=Cdproject

# finish if not zsh {{{2
# Following code may cause syntax error in strict POSIX shell
# (like array construction), so return early.
if ! command -v zstyle >/dev/null 2>&1; then
    return
fi

# zshrc {{{1
# Command completion {{{2
typeset -U fpath
fpath=(~/.zsh_comp $fpath[@])
autoload -Uz compinit promptinit

# arrow-key driven autocompletion
zstyle ':completion:*' menu select

# complete abc to a-big-command;
# ref: https://superuser.com/a/815317
#
# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- full flex completion (abc => ABraCadabra)
#
# word flex completion is removed because of whitespace;
# (see comments in this answer).
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'

# history setting {{{2
# let's see if the performance is accessible.
SAVEHIST=1000000
HISTSIZE=$SAVEHIST
HISTFILE=~/.zsh_history
# ignore history entry with leading space;
# "<space><cr>" to lose them immediately.
setopt HIST_IGNORE_SPACE

# hh(): history enhancement. put history search result in zle {{{2
hh() {
    if ! command -v fzf &>/dev/null; then
        echo 'fzf not found!' >&2
        return 1
    fi
    local result=$(fc -l -n 0 -1 | fzf --tac --cycle --no-sort)
    if [ -n "$result" ]; then
        # TODO handle multiline history.
        print -rz -- "$result"
    fi
}

# cd setting {{{2
export DIRSTACKSIZE=16
setopt auto_pushd pushd_ignore_dups pushd_minus

# j(): cd enhancement {{{2
_cd_history() {
    if [[ $PWD != $_cd_history_last ]]; then
        if [[ -v _cd_history_last ]]; then
            printf '%s\n' "$PWD" >> ~/.cache/cd_history
        fi
        _cd_history_last="$PWD"
    fi
}

_fix_title() {
    print -nP '\x1b]0;%~\007'
}

precmd_functions+=(_cd_history _fix_title)

_set_title() {
    print -nP "\x1b]0;"; print -nr -- "$1"; print -nP "\007"
}

preexec_functions+=(_set_title)

j() {
    prefix=$1
    if [ -n "$prefix" ]; then
        prefix=$({ cd "$prefix" && pwd; } 2>&1)
        # prefix may be invalid path, so check here.
        # BUT this may not be necessary? (fzf below uses -0 option.)
        if [ -n "$prefix" ]; then
            prefix="^${prefix}/ "
        fi
    fi
    if [[ $(wc -l ~/.cache/cd_history | awk '{ print $1 }') -gt 10000 ]]; then
        # delete first 5000 lines silently.
        sed -i '1,5000d' ~/.cache/cd_history
    fi
    s=$(sort ~/.cache/cd_history | uniq -c | sort -nk1 | sed -E 's/^\s*[0-9]+\s*//' \
        | { while read x; do if [ -d "$x" ]; then echo "$x"; fi; done; } \
        | fzf -q "$prefix" --tac +s -0)

    # return if <C-d> / <C-c>.
    if [ $? -eq 130 ]; then
        return 0
    fi

    if [ -n "$s" ]; then
        if ! [ -t 1 ]; then
            printf '%s\n' "$s"
        else
            cd "$s"
        fi
        return
    else
        if ! [ -t 0 ]; then
            return
        fi
        printf 'not found; using fzf? (from ~/) [y/N] ' >&2
        if read -q >&/dev/null; then
            echo
            prefix="${prefix:-$HOME}"
            file=$(cd "$prefix" && fzf --header='goto dir of file' --header-first)
            file="$prefix/${file%/*}"
            if [ -e "$file" ]; then
                if ! [ -t 1 ]; then
                    printf '%s\n' "$file"
                else
                    cd "$file"
                fi
            fi
        else
            echo
        fi
    fi
}

# readline keybindings {{{2
bindkey -e
bindkey \^U backward-kill-line

# '#' at begin-of-line as comment {{{2
setopt interactivecomments

# <C-x><C-e>: edit command line {{{2
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey \^x\^e edit-command-line

# simple PS1 {{{2
PS1='%B%(?..%F{red}[%?] )%F{green}[%D{%Y-%m-%d %H:%M:%S}] %F{yellow}%~'$'\n''%F{green}%#%f%b '

# PS1 for bubblewrap {{{2
if [[ $OSTYPE =~ linux ]]; then
    if [[ "$(readlink /proc/1/exe)" =~ bwrap ]]; then
        PS1="(bwrap) $PS1"
    elif command -v bwrap >/dev/null && [ -e ~/.config/misc/bubblewrap.conf ]; then
        PS1="(host) $PS1"
    fi
fi

# s() or x(): x11 / wayland {{{2
if [[ $OSTYPE =~ linux ]] && [ -z "$WAYLAND_DISPLAY" ] && [ -z "$DISPLAY" ]; then
    # let qt use kvantum theme in gtk;
    # TODO: disable it if using kde plasma.
    export QT_STYLE_OVERRIDE=kvantum

    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
    export XMODIFIERS=@im=fcitx

    _start-wayland() {
        #XDG_SESSION_TYPE=wayland dbus-run-session startplasma-wayland
        #XDG_SESSION_TYPE=wayland dbus-run-session gnome-session
        #labwc
        wayfire
    }
    _s() {
        export LANG=zh_CN.UTF-8
        export QT_QPA_PLATFORM=wayland
        export SDL_VIDEODRIVER=wayland
        _start-wayland
    }

    x() {
        # plasma has its own value.
        export QT_QPA_PLATFORMTHEME=qt5ct
        startx
    }

    s() {
        (_s)
    }
fi

# startx automatically in linux console {{{2
if [[ $OSTYPE =~ linux ]] && [ "$TTY" = /dev/tty1 ] && [ "$TERM" = linux ]; then
    x  # defined above
fi
# finish {{{2
compinit

