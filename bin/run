#!/bin/bash

# rewrite with lua or zig?

set -e

usage()
{
    printf 'compile (to temporary file) and run:

    Description:
        Arguments before the first "--" (and surely after source filename) are
        passed to compiler.

        So even if you run executable / script directly (where compiler args
        don'"'"'t make sense), it is better for you to append "--" after source
        file immediately.

    Example:
        run some.c args passed to some.c # no "--" in args
        run some.cpp -- args passed to some.cpp
        run some.rs args passed to compiler -- args passed to some.rs
        run some.go args passed to compiler -- # no args passed to some.go
        run some.py -- args
        run some -- args # where some is executable\n'
}

warn()
{
    printf "$@" >&2
}

abort()
{
    warn "$@"
    exit 1
}

if [ $# -eq 0 ] || [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
    usage
    exit 0
fi

compiler_args=()
exe_args=()
double_dash=false
interpreter=""
no_compiler=false

#
# source file name handle
#
source_file=$1
shift

if [ "${source_file#-}" != "${source_file}" ] || \
    [ "${source_file#*/}" = "${source_file}" ]; then
    # handle path begining with dash or not containing slash
    # eg: "-rf" -> "./-rf"
    # eg: "foo" -> "./foo"
    source_file=./$source_file
fi

if ! [ -f "$source_file" ]; then
    abort "file not found: %s\n" "$source_file"
fi

#
# additional args parse
#
for arg in "$@"; do
    if [ "$arg" = '--' ] && ! $double_dash; then
        double_dash=true
        compiler_args=("${exe_args[@]}")
        exe_args=()
        continue
    fi
    exe_args=("${exe_args[@]}" "$arg")
done

#
# guess additional args based on file extension
#
case ${source_file##*.} in
    c|cpp|rs)
        case ${source_file##*.} in
            c) compiler=cc ;;
            cpp) compiler=c++ ;;
            rs) compiler=rust ;;
        esac
        # TODO quote?
        tempfile=$(mktemp)
        compiler_args=("$source_file" "${compiler_args[@]}" -o "$tempfile")
        ;;
    go)
        # compiler_args are ignored
        # script quit here
        exec go run "$source_file" "${exe_args[@]}"
        ;;
    *)
        if [ -x "$source_file" ]; then
            no_compiler=true
        elif [ "$( head -c 2 "$source_file" )" = '#!' ]; then
            interpreter="$( head -n 1 "$source_file" )"
            interpreter=${interpreter#\#\!}
            no_compiler=true
        else
            abort 'compiler not found for %s\n' "$source_file"
        fi
        ;;
esac

#
# execute
#
if $no_compiler; then
    # NOTE: no quote surrounding $interpreter
    exec $interpreter "$source_file" "${exe_args[@]}"
else
    # copy from vimtutor
    trap 'rm "$tempfile"' 0 1 2 3 9 11 13 15

    "$compiler" "${compiler_args[@]}"
    "$tempfile" "${exe_args[@]}"
fi
