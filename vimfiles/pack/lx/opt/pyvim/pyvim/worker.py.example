import os
import pathlib
import textwrap
from pyvim.libvim import Worker as BaseWorker, vim

# this file may be loaded with exec(), so __file__ can't be used to get cwd.
# so use python process startup cwd (set in plugin/server.vim) and join pyvim.
CWD = pathlib.Path().cwd().joinpath('pyvim')

PYVIM_RC = os.getenv('PYVIM_RC')


class Worker(BaseWorker):

    # it's recommended to keep the config method defined below in "worker.py",
    # then you can open it easily.
    #
    # you can define more methods in this class, and they will appear once
    # the python process is reloaded (restart vim or `:Py3 restart`).

    async def config(self, _args: str, bang: bool = False):
        """open worker.py (pyvim user config file)"""
        config_file = CWD.joinpath('worker.py')
        if PYVIM_RC:
            config_file = pathlib.Path(PYVIM_RC)
        f_exists = config_file.exists()
        f_escaped = await vim.fn.fnameescape(str(config_file))
        f_editcmd = 'e' if bang else 'tabe'
        await vim.cmd(f_editcmd + ' ' + f_escaped)
        if not f_exists:
            content = textwrap.dedent('''\
                # This file is generated from "worker.py.example";
                # once you save this file ("worker.py") to disk,
                # `:Py3` command will load worker.py instead of worker.py.example.
            ''')
            content += '\n'
            with CWD.joinpath('worker.py.example').open() as f:
                content += f.read()
            await vim.fn.append('$', content.rstrip('\n').split('\n'))

# vim:ft=python
