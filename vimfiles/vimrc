if !has('vim9script') | throw 'vim9script feature not detected!' | endif
vim9script noclear
# vimrc detection. {{{1
# Error if reading system-vimrc. {{{
# Some distribution's system-vimrc (like openSUSE) does sth,
# like set mapping, add autocmd.
# Some of these settings are good, but we want to keep these setting in vimrc
# (so it works for other distribution).
# To avoid duplicate setting, we just disable loading system-vimrc.
#
# Suggestion: put `exec /usr/bin/vim -Nu ~/vimfiles/vimrc "$@"` in ~/bin/vim,
# and add ~/bin in $PATH (before /usr/bin), so ~/bin/vim wins.
#
# In some environment (like git-for-windows), it is hard to put custom vim in
# $PATH.
# set vim variable g:vimrc_allow_system to 1 to skip check.
#
# Inspection of some distros' system vimrc:
#   git-for-windows:
#     - add autocmd to recover jump; safe to duplicate.
#   openSUSE:
#     - autocmd to recover jump (it's ok);
#     - some key mapping to cause <Ctrl-[> delay, this is not acceptable!
# }}}
def TrSlash(s: string): string
    if has('win32')
        return substitute(s, '\', '/', 'g')
    else
        return s
    endif
enddef

const first_vimrc = execute('scr')->split("\n")->get(0)
->substitute('\v^.{-}:\s*', '', '')
->expand()
->TrSlash()

if has('vim_starting') && exists('$MYVIMRC') && first_vimrc != TrSlash($MYVIMRC)
    if !(
        exists('g:vimrc_allow_system') && !empty(g:vimrc_allow_system)
        )
        throw 'system-vimrc is read. skip loading vimrc!'
    endif
endif

if !exists('$MYVIMRC')
    # If we use `vim -u ...`, $MYVIMRC will not be set.
    # make ":e $MYVIMRC" work.
    $MYVIMRC = first_vimrc
endif

# config compatible with vim tiny version. {{{1
# (replace leading # with " when in legacy context)
#
# if run vim with `-u xxx`, then &cp is set; disable it with `set nocp`.
# lines between `:if` and `:endif` will be ignored by vim tiny.
if &compatible
    set nocompatible
endif
set nomodeline
# backspace
set bs=2
# expandtab
set et
# shiftwidth
set sw=4
# (relative)number
set nu
set rnu
# hlsearch
set hls
# incsearch
set is
# timeoutlen
set tm=5000
# ttimeoutlen
set ttm=0
# cursorcolumn & cursorline
set cuc
set cul
# laststatus
set ls=2
# showcmd
set sc
# wildmenu
set wmnu
# completeopt
set cot-=preview
# shortmess; show search count message (default in neovim)
set shm-=S
# set locale in vimrc.vim, since vim tiny doesn't support :if.
# menu
set enc=utf-8
# fileencodings
# See: http://edyfox.codecarver.org/html/vim_fileencodings_detection.html
set fencs=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
# runtimepath
# for tiny version, set rtp to empty string to avoid loading any file.
#set rtp=

# common definition {{{1
const is_unix = has('unix')
const is_win32 = has('win32')
const has_gui = has('gui_running') || has('mac')
|| (has('linux') && (!empty($DISPLAY) || !(empty($WAYLAND_DISPLAY))))

augroup vimrc
    au!
augroup END

# option {{{1
# &rtp / &pp {{{2
set rtp=~/vimfiles,$VIMRUNTIME,~/vimfiles/after
set pp=~/vimfiles,$VIMRUNTIME

# win32 environment prepare {{{2
if is_win32
    # make ":!" in gui work like in unix: no external cmd window. {{{
    # set go+=! is also ok, but it requires pty.
    #
    # to get shell output as variable:
    #   - use system(); but multiple stmt is not handled correctly when &shell
    #   is unix shell.
    #   - use ":Sh" from my vim-sh plugin; but it depends on unix shell.
    #   - DO NOT use execute("!xxx"), since it also contains excmd in output.
    #   }}}
    set noshelltemp

    # Set shellslash, so file path completion returns slash based str, {{{
    # which works in sh environment and win32 shell (cmd is not supported?).
    # shellescape() also returns unix-shell-friendly string.
    #   - plugin vim-fuzzy also requires it.
    # Windows XP does not like slash path; let's handle it in ":Start"
    # UserCommand. }}}
    set shellslash

    # set env for cygwin / msys2 shell (start via :!): $VIM, $MYVIMRC... {{{
    # It's better to override $VIM / $VIMRUNTIME via shell startup, so cygwin
    # vim has correct $VIM set (/usr/share/vim). }}}
    $VIM = TrSlash($VIM)
    $VIMRUNTIME = TrSlash($VIMRUNTIME)
    $MYVIMRC = TrSlash($MYVIMRC)

    # $HOME should be set to make git bash find ~; otherwise vim-fuzzy won't
    # work (e.g. "RecentFiles" does not show file under ~).
    if !exists('$HOME')
        $HOME = TrSlash($USERPROFILE)
    else
        $HOME = TrSlash($HOME)
    endif

    # set &shell, and add dir of it to $PATH. {{{
    # console vim and gvim handle &shell differently:
    # When &shell contains whitespace and not quoted, console vim does not
    # work with ":!..." command: it calls _wsystem() currently, while in gvim
    # it calls CreateProcess(); Most importantly, quoting is handled
    # differently.
    # So only set shell when it does not contain special char.
    #
    # To make things simpler, use git path to find bash.
    # Then git should be installed where path does not contain speical char.
    #
    # NOTE: busybox sh cannot handle CJK correctly (chcp.exe / utf-8). Use
    # cygwin / msys2 derived shell (fullset) if possible.
    # }}}
    const git_path = exepath('git')->substitute('\', '/', 'g')
    for _ in ['']  # use a for loop to make indent below fewer.
        if empty(git_path)
            break
        endif
        if git_path->match('\v[^/:a-zA-Z0-9._-]') >= 0
            echoerr 'vimrc: git path contains special char; skip set shell.'
            break
        endif

        # git.exe, when invoking from git bash, has different paths. {{{
        # checking 4 times is enough.
        # $ find ./ -name git.exe  # from git root dir
        # ./bin/git.exe
        # ./cmd/git.exe
        # ./mingw64/bin/git.exe
        # ./mingw64/libexec/git-core/git.exe
        # }}}
        var depth = 4
        var git_root = git_path
        while depth > 0
            depth -= 1
            git_root = fnamemodify(git_root, ':h')
            if executable(git_root .. '/usr/bin/bash')
                break
            endif
        endwhile

        const bash_path = git_root .. '/usr/bin/bash'
        if !executable(bash_path)
            echoerr 'vimrc: bash not found in git dir; using MinGit?'
            break
        endif
        &shell = bash_path
        if fnamemodify(exepath('find'), ':h') != fnamemodify(bash_path, ':h')
            # always add dir of shell to $PATH, so tools like find wins. {{{
            # (it will be messy when calling win32 find.exe in unix shell)
            # When running cygwin / msys2 shell via :!, bash_path here will be
            # translated to /usr/bin, which is feasible. }}}
            $PATH = fnamemodify(bash_path, ':h') .. ';' .. $PATH
        endif
    endfor

    # vim-sh config; busybox sh rc
    $ENV = expand('~/.config/zshrc')

    # set &shell related options. {{{
    # NOTE: to use '"' correctly, all '"' should be escaped with '\'.
    # like this:
    #   :!echo \"hello world\"
    # (so just use :Sh if possible: it is more user friendly, and does not
    # depends on &shell related setting) }}}
    if &shell->match('\v(bash|zsh|busybox(|.exe) sh)(|.exe)$') >= 0
        # these settings are from vim_faq, modified.
        # https://vimhelp.org/vim_faq.txt.html#faq-33.6
        &shellcmdflag = '-c'
        # shq seems to modify excmd very early; use sxq instead.
        &shellquote = ''
        &shellxquote = '"'
        # sxe take effect even when sxq is not "(", so set it to empty.
        # see vim-sh (search ":!start") for details.
        &shellxescape = ''
        # shellpipe / shellredir seems not required.
    endif
endif

# unnamed... {{{2
# vim-vimserver should be called early.
packadd vim-vimserver

# set leader / localleader to unused key, so plugin is hardly to clash with
# our key.
# Refer: lacygoill's vimrc.
g:mapleader = "\<S-F10>"
g:maplocalleader = "\<S-F11>"

# use <Space> as *true* leader key.
noremap <Space> <Nop>
nnoremap <Space><Space> :nmap <Char-60>Space<Char-62><CR>
nnoremap <Space>;; :nmap <Char-60>Space<Char-62>;<CR>

# shell {{{2
if executable('zsh') && is_unix
    &shell = exepath('zsh')
endif

# cmdline completion {{{2
# defined here instead of legacy, since it is available only after version 8.x
set wildoptions=pum

# builtin terminal enhancement {{{2
augroup vimrc
    def TerminalPaste()
        echo @"
        if @"[-1 : ] == "\n"
            echohl WarningMsg
            echo '<Newline> at end!'
            echohl NONE
        endif
        echo 'paste in terminal? (cursor may be at wrong place!) [y/N] '
        if tolower(nr2char(getchar())) == 'y'
            feedkeys("i\<C-w>" .. '""', 'n')
            redraws | echon 'pasted.'
        else
            redraws | echon 'cancelled.'
        endif
    enddef

    # define a function, so it can also be used in popup terminal.
    def TerminalSetup()
        # NOTE: keymap defined here (terminal [p]aste).
        if &buftype == 'terminal'
            setl nonu | setl nornu
            # vim-jump
            nmap <buffer> <CR> <Plug>(jump_to_file)
            vmap <buffer> <CR> <Plug>(jump_to_file)
            # clipboard
            nnoremap <buffer> p :<C-u>call <SID>TerminalPaste()<CR>
            nnoremap <buffer> P :<C-u>call <SID>TerminalPaste()<CR>
            # dirvish
            if exists(':Dirvish') == 2
                nnoremap <buffer> - <Cmd>execute 'Dirvish' fnameescape(getcwd())<CR>
            endif
            # <C-w> as in terminal.
            tnoremap <buffer> <C-w> <C-w>.
        endif
    enddef
    au TerminalWinOpen * TerminalSetup()
augroup END

# statusline {{{2
&stl = '[%{winnr()},%{mode()}%M%R]'
.. '%{ empty(&ft) ? "" : " [".&ft."]" }'
.. ' %<'
.. '%{ &ft == "qf" && exists("w:quickfix_title") ? w:quickfix_title : "" }'
.. '%{% &ft == "qf" && exists("w:quickfix_title") ? "" : "%F" %}'
.. ' %=<%B>'
.. ' [%LL|%l:%{charcol(".")}|%vv]'

# viminfo {{{2
# &viminfo should be set with ^= (the first match will be used) {{{
# according to source code.
# (in file src/viminfo.c, function find_viminfo_parameter())
#
# if option is already present (like '1000), reset (like :so $MYVIMRC) would
# do nothing.
# }}}
set viminfo^='1000

# set locale {{{2
if is_unix
    # some environment cannot set lang, like in minimal container (fedora).
    silent! lang en_US.UTF-8
else
    # for msys2 / git-for-windows, set $LANG to make CJK display correctly.
    $LANG = 'en_US.UTF-8'
    # when libintl.dll is not available, message translation is disabled.
    # so no need to set "$LANG = 'en'". (see :help win32-gettext)
endif

# foldmethod {{{2
# it's too easy to use vim style folder in various text file.
# just set fdm=marker as default.
set fdm=marker

# sessionoptions; better ":mksession" option. {{{2
# do not include options in ssop; {{{
# since it breaks mapping with <ScriptCmd>. (like vim-fuzzy)
# Maybe we can use other way to dump mapping.
# }}}
set ssop=blank,curdir,folds,help,tabpages,winsize,terminal

# various vim dir & file {{{2
# copy from https://github.com/mhinz/vim-galore#temporary-files (modified)
# backup files
set backup
&backupdir = expand('~/.vim/files/backup' .. '//')
set backupext=-vimbackup
set backupskip=
# swap files
&directory = expand('~/.vim/files/swap' .. '//')
# use default value
#set updatecount =100
# undo files
set undofile
&undodir = expand('~/.vim/files/undo/')
# viewdir (:mkview / :loadview)
&viewdir = expand('~/.vim/files/view/')
# viminfo files
&viminfofile = expand('~/.vim/files/viminfo')

# create directory if needed
for t_dir in [
        &backupdir, &directory, &undodir, &viewdir,
        expand('~/.vim/sessions/'),
        ]
    if !isdirectory(t_dir)
        mkdir(t_dir, 'p')
    endif
endfor

# disable some feature
set nobackup
set noundofile

# alt key in terminal {{{2
if !has('gui_running') && is_unix
    # see ":set-termcap"
    for i in 'abcdefghijklmnopqrstuvwxyz1234567890'
        exec printf("set <M-%s>=\<Esc>%s", i, i)
    endfor
    set ttimeoutlen=100
endif

# set env for embedded terminal. {{{2
if !exists('$FZF_DEFAULT_OPTS')
    $FZF_DEFAULT_OPTS = '--cycle --no-sort --no-mouse --color=16'
endif

# enable mouse support. {{{2
# only set it in desktop OS, not server;
# vim in server is usually controlled by tmux, and less functional.
set mouse=a

# IME {{{2
if is_win32
    # when im is on in insert mode, esc to normal mode with im off.
    set iminsert=2
endif

# term & gui (but not colorscheme) {{{2
# TODO g:terminal_ansi_colors works even if (no gui && no tgc). is this a bug?
# NOTE: no `set bg`; seems that terminal theme (dark / light) can be detected.
if has('gui_running')
    # go-!: uniform shell interface, like :!, :sh.
    set guioptions=!
    set lines=30
    set columns=120
else
    if is_win32
        # Try to set termguicolors; if success, &t_Co will be changed to 256,
        # then we can use better looking colorscheme.
        # At least works in windows 10 (1809+?).
        silent! set tgc
    else
        if $TERM->tolower() == 'linux'
            # linux tty
        else
            # 256color or tgc
            if $TERM !~ 'xterm'
                # make tgc work; :help xterm-true-color
                &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
                &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
            endif
            silent! set tgc
        endif

        if $TERM->tolower() =~? 'xterm' && executable('/mnt/c/Windows/notepad.exe')
            # wsl; fix vim start in replace mode;
            # Refer: https://superuser.com/a/1525060
            set t_u7=
        endif
    endif
endif

# internal helper function. {{{1
# expand() should NOT be used to expand arbitrary file (like containing
# "[b-a]" in filename).
def ExpandHead(s: string): string
    if match(s, '\v^[%#<]') == 0
        return expand(s)
    elseif match(s, '\v^\~') == 0
        return substitute(s, '\v^\~', expand('~'), '')
    elseif match(s, '\v^\$\ze[a-zA-Z_]') == 0
        const idx = match(s, '\v([^a-zA-Z_]|$)', 1)
        return substitute(s, s[: idx - 1], expand(s[: idx - 1]), '')
    endif
    return s
enddef

def g:ExpandHead(s: string): string
    return ExpandHead(s)
enddef

# keymap {{{1
# custom text object {{{2
# all
vnoremap aa :<C-u>normal! ggVG<CR>
onoremap aa :<C-u>normal! ggVG<CR>
# line
vnoremap al :<C-u>normal! 0v$h<CR>
onoremap al :<C-u>normal! 0v$h<CR>
# line, strip space
vnoremap il :<C-u>normal! ^vg_<CR>
onoremap il :<C-u>normal! ^vg_<CR>
# fold
vnoremap az V]zo[zo
onoremap az :<C-u>normal! V]zo[zo<CR>
# fold, without marker. (trailing marker is not un-select. press k if it
# exists.)
vnoremap iz V]zo[zjo
onoremap iz :<C-u>normal! V]zo[zjo<CR>

# <M-hjkl> {{{2
tnoremap <M-h> <C-w>h
tnoremap <M-j> <C-w>j
tnoremap <M-k> <C-w>k
tnoremap <M-l> <C-w>l

nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

inoremap <M-h> <C-o><C-w>h
inoremap <M-j> <C-o><C-w>j
inoremap <M-k> <C-o><C-w>k
inoremap <M-l> <C-o><C-w>l

# <C-tab>; <M-t> {{{2
tnoremap <C-Tab> <C-w>gt
tnoremap <S-C-Tab> <C-w>gT

nnoremap <C-Tab> gt
nnoremap <S-C-Tab> gT

inoremap <C-Tab> <C-o>gt
inoremap <S-C-Tab> <C-o>gT

tnoremap <M-t> <C-w>:tabe<CR>
nnoremap <M-t> :tabe<CR>
inoremap <M-t> <C-o>:tabe<CR>

# <M-1> - <M-9> {{{2
for i in range(1, 8)
    execute printf("tnoremap \<M-%d> \<C-w>%dgt", i, i)
    execute printf("nnoremap \<M-%d> %dgt", i, i)
    execute printf("inoremap \<M-%d> \<C-o>\<C-w>%dgt", i, i)
endfor
execute "tnoremap \<M-9> \<C-w>:tablast<CR>"
execute "nnoremap \<M-9> :tablast<CR>"
execute "inoremap \<M-9> \<C-o>:tablast<CR>"
# preserve <M-0> for DE / wm.

# i_<tab> {{{2
imap <expr> <Tab> VimTab()
inoremap <S-Tab> <C-p>

# use key <Plug>VimTab as a fake key, so it can be mapped in different
# contexts, like coc#refresh(), vim command completion.
def VimTab(): string
    if pumvisible() != 0
        return "\<C-n>"
    else
        return "\<Plug>VimTab"
    endif
enddef

# completion
inoremap <Plug>VimTab <C-x><C-o>

# i_<C-u> {{{2
# from defaults.vim
inoremap <C-U> <C-G>u<C-U>

# t / T {{{2
# I don't use t / T, so use them to do other things.
nnoremap t <Cmd>call <SID>TabOpenOrClose()<CR>
# TODO impl tab switch with vim-fuzzy.
nmap T <Nop>

def TabOpenOrClose()
    if empty(&buftype) && empty(bufname()) && &swapfile && !&modified
        # avoid closing last tab.
        && tabpagenr('$') != 1
        wincmd c
    else
        tabe
    endif
enddef

# v_* / v_#; like `g*` / `g#`, dep: Selection() {{{2
vnoremap <silent> * :<C-u>call feedkeys('/\V' .. substitute(escape(Selection(), '\/'), "\n", '\\n', 'g') .. "\n", 't')<CR>
vnoremap <silent> # :<C-u>call feedkeys('?\V' .. substitute(escape(Selection(), '\/'), "\n", '\\n', 'g') .. "\n", 't')<CR>

# <c-n> / <c-p> to switch buffer. {{{2
nnoremap <C-n> <Cmd>call <SID>SwitchBuffer(v:true)<CR>
nnoremap <C-p> <Cmd>call <SID>SwitchBuffer(v:false)<CR>
def SwitchBuffer(reverse: bool = false)
    var current: number = bufnr()

    const single_window: bool = tabpagebuflist()->len() == 1
    if !single_window
        tabe
    endif

    const term_list = term_list()
    const all_bufs = getbufinfo()
    ->filter((_, i) => !empty(i.name) && !empty(i.listed)
    && index(term_list, i.bufnr) < 0)
    ->mapnew((_, i) => i.bufnr)

    if empty(all_bufs)
        # avoid divide zero
        return
    endif

    var idx = index(all_bufs, current)
    if idx < 0 && reverse
        idx = 0
    endif
    if single_window
        idx += (reverse ? 1 : -1)
    endif
    idx = idx % len(all_bufs)

    execute ':' string(all_bufs[idx]) 'b'
enddef

# gF / v_gF {{{2
# (handle column nr; v_gF handle line / column nr)
# using my plugin vim-jump.
nmap gF <Plug>(jump_to_file)
vmap gF <Plug>(jump_to_file)

# terminal escape; {{{2
# used to use <C-Space>, but it may be occupied by DE / OS. {{{
# I don't use <C-t> key in terminal, so it's ok to map it. }}}
tnoremap <C-t> <C-\><C-n>

# <Space>l {{{2
nnoremap <silent> <Space>l :noh<CR>

# <Space>r; simple tasks: tasks.vim {{{2
nmap <Space>r <Plug>(tasks-select)
vmap <Space>r <Plug>(tasks-select)

# <Space>c; getcwd {{{2
nnoremap <Space>c <Cmd>call <SID>GotoWhichDir()<CR>

def GotoWhichDir()  # {{{
    const dir_buffer: string = Cd_get_buf_dir()
    var dir_project: string
    try
        dir_project = Cd_get_project_dir()
    catch
    endtry
    const dir_home: string = expand('~')
    const dir_cwd: string = getcwd()

    # echo {{{
    if dir_cwd == dir_home
        echon '*'
    endif
    echohl Directory
    echon '[a] home' | echohl None | echon ' '

    if dir_cwd == dir_project
        echon '*'
    endif
    if empty(dir_project)
        echohl WarningMsg
    else
        echohl Directory
    endif
    echon '[d] project' | echohl None | echon ' '

    if dir_cwd == dir_buffer
        echon '*'
    endif
    echohl Directory
    echon '[f] buffer' | echohl None | echon ' '
    # }}}

    echon dir_cwd .. ' > '
    const ch = getcharstr()
    # avoid press enter to continue msg.
    echo "\n" | redrawstatus

    if ch == ' '
        # use <Space> key as escape (like vim-sneak).
    elseif ch == 'a'
        Cdhome
    elseif ch == 'd'
        if !empty(dir_project)
            Cdproject
        else
            echohl Error
            echon 'project dir not available!'
            echohl None
        endif
    elseif ch == 'f'
        Cdbuffer
    else
        # sneak like behavior.
        feedkeys(ch, 't')
    endif
enddef
# }}}

# <Space>sl / <Space>ss; mksession. {{{2
nnoremap <Space>sl :so ~/.vim/sessions/
nnoremap <expr> <Space>ss
            \ $':wall \| mksession{empty(v:this_session) ? "" : "!"}'
            \ .. $' {v:this_session ?? "~/.vim/sessions/"}'

# <Space>y / <Space>p; clipboard {{{2
# use pbcopy / pbpaste in $PATH as clipboard; wayland / x11 / tmux ...
# detection is defined there. (~/bin/{pbcopy,pbpaste})
nnoremap <Space>y <Cmd>call <SID>ClipboardCopy("")<CR>
nnoremap <Space>p <Cmd>call <SID>ClipboardPaste("")<CR>

def ClipboardCopy(cmd_: string)
    var cmd = cmd_
    if empty(cmd)
        if has('clipboard') && is_win32
            # NOTE: unix: X11 clipboard content will disapper when program exits.
            @+ = @"
            return
        elseif executable('pbcopy')
            cmd = 'pbcopy'
        else
            throw 'clipboard not found!'
        endif
        system(cmd, @")
    else
        system(cmd, @")
    endif
enddef

def ClipboardPaste(cmd_: string)
    var cmd = cmd_
    if empty(cmd)
        if has('clipboard') && is_win32
            @" = @+
            return
        elseif executable('pbpaste')
            cmd = 'pbpaste'
        else
            throw 'clipboard not found!'
        endif
        @" = system(cmd)
    else
        @" = system(cmd)
    endif
enddef

# <Space><CR>; execute current line (or select lines), comment removed {{{2
nnoremap <Space><CR> <Cmd>call <SID>ExecuteLines('n')<CR>
vnoremap <Space><CR> :<C-u>call <SID>ExecuteLines('v')<CR>

def ExecuteLines(mode: string)
    var lines: list<string>
    if mode == 'n'
        lines = [getline('.')]
    elseif mode == 'v'
        lines = getline("'<", "'>")
    endif
    var result_l = []
    for i in lines
        result_l = add(result_l, substitute(i, '\v^\s*(//|#|"|--|;)+', '', ''))
    endfor
    var result: string = join(result_l, "\n")
    echom result
    echo 'execute? y/N '
    if nr2char(getchar())->tolower() == 'y'
        redraws
        try
            execute 'legacy' result
        finally
        endtry
    else
        redraws | echon 'cancelled.'
    endif
enddef

# <Space>n; switch number / relativenumber {{{2
nnoremap <silent> <Space>n <Cmd>call <SID>Switch_nu_rnu()<CR>

def Switch_nu_rnu()
    # no [0, 1]
    const presents = [[1, 1], [1, 0], [0, 0], [1, 1]]
    ->mapnew((_, i) => [i[0] == 1, i[1] == 1])
    const idx = index(presents, [&l:nu, &l:rnu])
    [&l:nu, &l:rnu] = presents[idx + 1]
enddef

# <Space>m; switch mouse {{{2
nnoremap <silent> <Space>m <Cmd>call <SID>Switch_mouse()<CR>

def Switch_mouse()
    if &mouse == 'a'
        set mouse=
    else
        set mouse=a
    endif
enddef

# <Space>q; switch quickfix window (open / focus or close) {{{2
nnoremap <silent> <Space>q <Cmd>call <SID>SwitchQuickfixWindow()<CR>

def SwitchQuickfixWindow()
    if &ft == 'qf'
        cclose
    else
        execute 'bot' 'copen' &cwh
    endif
enddef

# <Space>v; shortcut for reader mode. (view code / text easily.) {{{2
# TODO map more key (one hand); provide help page (double ? to enter search mode).
nnoremap <Space>v <Cmd>call <SID>SwitchReaderMode()<CR>
var reader_mode = exists('reader_mode') ? reader_mode :
{on: false, winid: -1, timeoutlen: 0}

def SwitchReaderMode()
    const mapping =<< trim END
    q <Cmd>call <SID>SwitchReaderMode()<CR>
    <Space> <C-f>
    <S-Space> <C-b>
    f <C-f>
    b <C-b>
    d <C-d>
    u <C-u>
    e <C-e>
    y <C-y>
    x <C-w>c
    1 1gt
    2 2gt
    3 3gt
    4 4gt
    5 5gt
    6 6gt
    7 7gt
    8 8gt
    9 <Cmd>tablast<CR>
    END
    if reader_mode.on
        mapping->mapnew((_, i) => {
            execute 'nunmap' i->split(' ')[0]
            })
        &timeoutlen = reader_mode.timeoutlen
        reader_mode.on = false
        popup_close(reader_mode.winid)
    else
        mapping->mapnew((_, i) => {
            execute 'nnoremap' i
            })
        reader_mode.winid = popup_create(
        ['reader mode'], {
            line: &lines,
            mapping: false,
            highlight: 'Special',
            tabpage: -1,  # show in all tabs.
            }
        )
        reader_mode.timeoutlen = &timeoutlen
        # set to 0 to make <Space> work (skip mapping immediately).
        &timeoutlen = 0
        reader_mode.on = true
    endif
enddef

# plugin {{{1
# first, enable ":Pack" command.
packadd vim-pack

# disable default plugin {{{2
g:loaded_2html_plugin = 1
g:loaded_getscriptPlugin = 1
g:loaded_gzip = 1
g:loaded_logiPat = 1
g:loaded_netrwPlugin = 1
g:loaded_tarPlugin = 1
g:loaded_vimballPlugin = 1
g:loaded_zipPlugin = 1

# bundled plugin config. {{{2
g:tasks_config_paths =<< trim END
~/vimfiles/config/tasks.ini
~/vimfiles/config/tasks-local.ini
END
g:tasks_config_paths
->map((_, i) => expand(i))
->filter((_, i) => filereadable(i))

g:markdown_folding = 1

# keep sync with https://lxhillwind.gitee.io/ highlight.
# NOTE: zig is not available in hljs right now.
g:markdown_fenced_languages = [
    'awk', 'python', 'sh', 'vim',
    'c', 'go', 'javascript',
    'dosini', 'json', 'yaml',
    'zig',
    ]

# mime {{{2
# TODO archive vim-filelist?
#Pack 'vim-filelist'
Pack 'vim-jump'
Pack 'vim-sh'
Pack 'pyvim'
g:pyvim_rc = expand('~/vimfiles/config/pyvim.py')
Pack 'vim-tasks'
if windowsversion() == '5.1'
    # Windows XP: use small icon before v8.2.4545; otherwise it won't display.
    Pack 'vim-old-ico'
endif

# vim dist. {{{2
# plugin here should not be loaded with ":Pack", since ":PackHelpTags" does
# not have enough permission to gen tag for them.
# use ":packadd!" (with !) to only add them to &rtp.
#
# use matchit, so vim9 filetype indent work as expected.
# https://github.com/vim/vim/issues/7628
packadd! matchit

# vender. {{{2
# Pack 'https://github.com/lacygoill/vim-fuzzy', {'commit': 'fa6a719'}
Pack 'vim-fuzzy'

# from network {{{2
Pack 'https://github.com/justinmk/vim-dirvish'
g:loaded_netrwPlugin = 1
Pack 'https://github.com/justinmk/vim-sneak'
g:sneak#label = 1
# sneak unmap f / t when one of them is pressed after sneak key. {{{
# MRE:
#   :map t <Nop><CR>
#   sssff
#   :map t
# then mapping for t disappeared.
#
# since I only map t / T (f / F not mapped), only set t / T below.
# }}}
g:sneak#f_reset = 1
g:sneak#t_reset = 0
# I do not use vim-surround, so preserve s / S for vim-sneak.
vmap S <Plug>Sneak_S
omap s <Plug>Sneak_s
omap S <Plug>Sneak_S
Pack 'https://github.com/tpope/vim-repeat'
Pack 'https://github.com/ciaranm/securemodelines', {'after': 1}
Pack 'https://github.com/masukomi/vim-markdown-folding'
g:markdown_fold_style = 'nested'
g:markdown_fold_override_foldtext = 0
Pack 'https://github.com/ziglang/zig.vim'
Pack 'https://github.com/lacygoill/vim9-syntax'

# basic completion {{{2
Pack 'https://github.com/skywind3000/vim-auto-popmenu'
# disable its imap <Tab>
g:apc_enable_tab = 0
# enable this plugin for filetypes, '*' for all files.
#g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}
g:apc_enable_ft = {'*': 1}
# source for dictionary, current or other loaded buffers, see ':help cpt'
set cpt=.,k,w,b
# don't select the first item.
set completeopt=menu,menuone,noselect
# suppress annoy messages.
set shortmess+=c

Pack 'https://github.com/skywind3000/vim-dict'
# always enable dict completion. (i_<Ctrl-x><Ctrl-k>)
execute 'set dict+=' .. globpath(&rtp, 'dict/text.dict', 0, 1)->get(0, '')->fnameescape()
# File type override
#g:vim_dict_config = {'html':'html,javascript,css', 'markdown':'text'}
g:vim_dict_config = {'markdown': 'text'}
# Disable certain types
#g:vim_dict_config = {'text': ''}

# coc; to install it, set var before source this file. {{{2
if exists('g:plugin_set_coc') && !empty(g:plugin_set_coc)
    g:apc_enable_ft = {}
    Pack 'neoclide/coc.nvim', {'branch': 'release'}
    # vim completion
    Pack 'Shougo/neco-vim'
    Pack 'neoclide/coc-neco'
    # run the following vim command to install coc plugins:
    #   CocInstall coc-go
    #   CocInstall coc-html
    #   CocInstall coc-pyright

    augroup vimrc
        au FileType go,html,python,vim g:InitCocLang()
    augroup END

    # coc keymap; define as global function, so it can be called outside.
    def g:InitCocLang()
        # GoTo code navigation.
        nmap <silent> <buffer> <Space>;d <Plug>(coc-definition)
        nmap <silent> <buffer> <Space>;y <Plug>(coc-type-definition)
        nmap <silent> <buffer> <Space>;i <Plug>(coc-implementation)
        nmap <silent> <buffer> <Space>;r <Plug>(coc-references)

        # completion
        inoremap <silent> <buffer> <expr> <Plug>VimTab coc#refresh()

        # diagnostic
        nmap <buffer> ]e <Cmd>call g:CocAction('diagnosticNext')<CR>
        nmap <buffer> [e <Cmd>call g:CocAction('diagnosticPrevious')<CR>

        # Use K to show documentation in preview window.
        nnoremap <silent> <buffer> K <Cmd>call <SID>CocShowDocumentation()<CR>

        nnoremap <silent> <buffer> <C-]> <Cmd>call <SID>CocDefinitionWithTagList()<CR>
    enddef

    def CocShowDocumentation()
        if (index(['vim', 'help'], &filetype) >= 0)
            execute 'h ' .. expand('<cword>')
        elseif (coc#rpc#ready())
            g:CocActionAsync('doHover')
        else
            execute '!' .. &keywordprg .. " " .. expand('<cword>')
        endif
    enddef

    # https://github.com/neoclide/coc.nvim/issues/576#issuecomment-632446784
    def CocDefinitionWithTagList()
        # Cribbed from :h tagstack-examples
        var tag = expand('<cword>')
        var pos = [bufnr()] + getcurpos()[1 :]
        var item = {'bufnr': pos[0], 'from': pos, 'tagname': tag}
        if g:CocAction('jumpDefinition')
            # Jump was successful, write previous location to tag stack.
            var winid = win_getid()
            var stack = gettagstack(winid)
            stack['items'] = [item]
            settagstack(winid, stack, 't')
        endif
    enddef
endif

# plugin commits (generated with :PackCommitGen) {{{1
Pack 'https://github.com/ciaranm/securemodelines', '9751f29699186a47743ff6c06e689f483058d77a'
Pack 'https://github.com/justinmk/vim-dirvish', '7e41cd7628d9844b4e66b45104f3abc326aa1a00'
Pack 'https://github.com/justinmk/vim-sneak', '94c2de47ab301d476a2baec9ffda07367046bec9'
Pack 'https://github.com/lacygoill/vim9-syntax', '808bca9ee4496d85f5d08924dfe24c2c2ae5b3e7'
Pack 'https://github.com/masukomi/vim-markdown-folding', '3f35acfb753cc9ea22182400b075c5b6e896ad71'
Pack 'https://github.com/skywind3000/vim-auto-popmenu', 'ea64a79b23401f48e95b9bce65ba39c6c020a291'
Pack 'https://github.com/skywind3000/vim-dict', 'b73128b7acbcae675b2e008c3c63adb74fce566e'
Pack 'https://github.com/tpope/vim-repeat', '24afe922e6a05891756ecf331f39a1f6743d3d5a'
Pack 'https://github.com/ziglang/zig.vim', '1cb9cd521cab91e39cf162b50b7a095fd12361d3'

# filetype & autocmd {{{1
filetype plugin indent on
if !exists('g:syntax_on')
    syntax on
endif

augroup vimrc
    # misc (filetype related) {{{2
    au BufNewFile,BufRead *.gv setl ft=dot
    au FileType yaml setl indentkeys-=0#
    au FileType zig setl fp=zig\ fmt\ --stdin
    au FileType markdown {
        setl tw=78

        hi link CheckboxUnchecked Type
        hi link CheckboxChecked Comment
        syn match CheckboxUnchecked '\v^\s*- \[ \] '
        syn match CheckboxChecked '\v^\s*- \[X\] '
        }

    # quickfix window
    au FileType qf &l:stl = &g:stl
    au FileType qf nnoremap <buffer> <C-n> <Cmd>cnewer<CR>
    au FileType qf nnoremap <buffer> <C-p> <Cmd>colder<CR>
    au FileType qf nnoremap <buffer> <C-j> <CR><C-w>p
    au FileType qf nnoremap <buffer> <Space>;l <Cmd>chistory<CR>

    # ":h ft-sh-syntax"
    g:is_posix = 1

    # viml completion
    au FileType vim inoremap <buffer> <Plug>VimTab <C-x><C-v>

    # markdown checkbox {{{
    def MarkdownToggleTaskStatus()
        const lineno = line('.')
        var line = getline(lineno)
        if line =~ '\v^\s*- \[X\] '
            line = substitute(line, '\v(^\s*- )@<=\[X\] ', '', '')
        elseif line =~ '\v^\s*- \[ \] '
            line = substitute(line, '\v(^\s*- \[)@<= ', 'X', '')
        elseif line =~ '\v^\s*- '
            line = substitute(line, '\v(^\s*-)@<= ', ' [ ] ', '')
        endif
        setline(lineno, line)
    enddef
    # }}}
    au FileType markdown nnoremap <buffer>
                \ <Space>;c <Cmd>call <SID>MarkdownToggleTaskStatus()<CR>

    # ReadBin / WriteBin impl {{{
    # avoid using busybox xxd.
    const xxd_path = filereadable($VIM .. '/bin/xxd') ? $VIM .. '/bin/xxd' : 'xxd'

    def ReadBin(name: string)
        execute printf('read !%s %s', shellescape(xxd_path), shellescape(name))
        normal gg"_dd
    enddef

    def WriteBin(name: string)
        execute printf(':%w !%s -r > %s', shellescape(xxd_path), shellescape(name))
        if !empty(v:shell_error)
            return
        endif
        setl nomodified
        redrawstatus | echon 'written.'
    enddef
    # }}}
    au BufReadCmd *.exe,*.dll ReadBin(expand('<amatch>'))
    au BufWriteCmd *.exe,*.dll WriteBin(expand('<amatch>'))

    # gx related (NOTE: key `gx` overwritten) {{{2
    nnoremap <silent> gx <Cmd>call <SID>Gx('n')<CR>
    vnoremap <silent> gx :<C-u>call <SID>Gx('v')<CR>

    # TODO show error?
    def GxOpen(...arg: list<string>)
        var text = join(getline(1, '$'), "\n")
        if empty(text)
            return
        endif
        if text->match('\v^[~$]') >= 0
            # expand ~ and $ (env).
            text = ExpandHead(text)
        endif
        const open_cmd = empty(arg) ? [text] : [arg[0], text]
        if empty(open_cmd)
            return
        endif
        execute 'Sh -g' open_cmd->mapnew((_, s) => shellescape(s))->join(' ')
    enddef

    def GxOpenGx(...arg: list<string>)
        if len(arg) == 1
            GxOpen(arg[0])
        else
            GxOpen()
        endif
        const winnr = winnr()
        wincmd p
        execute ':' .. winnr .. 'wincmd c'
    enddef

    def GxVim(...arg: list<string>)
        # a:1 -> cmd; a:2 -> text modifier; a:3 -> post string.
        var text = join(getline(1, '$'), "\n")
        if empty(text)
            return
        endif
        var cmd: string
        if len(arg) == 0
            cmd = text
        else
            if len(arg) >= 2 && !empty(arg[1])
                var Fun = arg[1]
                text = function(Fun)(text)
            endif
            cmd = arg[1] .. ' ' .. text
            if len(arg) >= 3 && !empty(arg[2])
                cmd ..= arg[2]
            endif
        endif
        exe cmd
    enddef

    def Gx(mode: string)
        var text: string
        if mode == 'v'
            var t = @"
            silent normal gvy
            text = @"
            @" = t
        else
            text = expand(get(g:, 'netrw_gx', '<cfile>'))
        endif
        exe printf('bel :%dnew', &cwh)
        # a special filetype
        setl ft=gx
        for line in split(text, "\n")
            append('$', line)
        endfor
        norm gg"_dd
    enddef

    def GxInit()
        setl buftype=nofile noswapfile
        setl bufhidden=hide
        if executable('qutebrowser')
            nnoremap <buffer> <Space>;s <Cmd>call <SID>GxOpen('qutebrowser')<CR>
        endif
        nnoremap <buffer> gx <Cmd>call <SID>GxOpenGx()<CR>
        if executable('qutebrowser') && has_gui
            nnoremap <buffer> gs <Cmd>call <SID>GxOpenGx('qutebrowser')<CR>
        endif
        nnoremap <buffer> <Space>;f <Cmd>call <SID>GxOpen()<CR>
        nnoremap <buffer> <Space>;v <Cmd>call <SID>GxVim("wincmd p \\|")<CR>
    enddef
    au FileType gx GxInit()

    # Remember the positions in files with some git-specific exceptions {{{2
    au BufReadPost * {
        # copied from /usr/share/vim/vim82/suse.vimrc
        if line("'\"") > 0 && line("'\"") <= line("$")
                    \ && expand("%") !~ "COMMIT_EDITMSG"
                    \ && expand("%") !~ "ADD_EDIT.patch"
                    \ && expand("%") !~ "addp-hunk-edit.diff"
                    \ && expand("%") !~ "git-rebase-todo"
            exe "normal g`\""
        endif
        }

    # fix % in cmdwin when matchit plugin enabled. {{{2
    au BufEnter * {
        if win_gettype() == 'command' && maparg('%', 'x') =~ 'Matchit'
            xnoremap <buffer> % %
        endif
        }

    # filelist (viminfo only saves 100 files) {{{2
    au BufNewFile,BufRead * {
        const name = expand('%:p')
        if !empty(name) && !HistBlacklist(name)
            if !isdirectory(expand('~/.cache'))
                mkdir(expand('~/.cache'))
            endif
            writefile([name], expand('~/.cache/file_history'), 'a')
        endif
        }

    # fin {{{2
augroup END

# colorscheme {{{1
# only set colorscheme if not set yet. {{{2
# using `trim(execute('color')) == 'default'` is not valid.
if !exists('g:colors_name')
    if has('gui_running') || &t_Co->str2nr() >= 256
        color base16-dynamic
    else
        if is_win32
            # cmd.exe window
            color pablo
            set nocursorcolumn
        else
            color default
        endif
    endif
endif

# terminal statusline tweak {{{2
augroup vimrc
    # colorscheme may not change at startup.
    au ColorScheme * hi! link StatusLineTermNC StatusLineNC
augroup END
hi! link StatusLineTermNC StatusLineNC

# terminal 16color {{{2
def TerminalAnsiColor()
    if !(has('gui_running') || &tgc)
        return
    endif
    # https://github.com/lxhillwind/base16-dynamic.vim
    if &bg == 'dark'
        g:terminal_ansi_colors = ["#263238", "#F07178", "#C3E88D", "#FFCB6B", "#82AAFF", "#C792EA", "#89DDFF", "#EEFFFF", "#546E7A", "#F07178", "#C3E88D", "#FFCB6B", "#82AAFF", "#C792EA", "#89DDFF", "#FFFFFF"]
    else
        g:terminal_ansi_colors = ["#fafafa", "#ca1243", "#50a14f", "#c18401", "#4078f2", "#a626a4", "#0184bc", "#383a42", "#a0a1a7", "#ca1243", "#50a14f", "#c18401", "#4078f2", "#a626a4", "#0184bc", "#090a0b"]
    endif
enddef

augroup vimrc
    au ColorScheme * TerminalAnsiColor()
augroup END
TerminalAnsiColor()

# Command / Function {{{1
# utils function. internal {{{2
def PopupSize(): dict<number>
    const width = max([&columns - 80, 80])
    const height = max([&lines - 24, 24])
    # NOTE: maxwidth / maxheight is not the initial window size!
    return {
        maxwidth: width, maxheight: height,
        minwidth: width, minheight: height,
        }
enddef

# snippet; :Scratch [filetype] / :ScratchNew [filetype] (with new window) {{{2
command -nargs=? -complete=filetype Scratch Scratch(<q-args>)
command! -nargs=? -complete=filetype ScratchNew SnippetInNewWindow(<q-args>)

def Scratch(ft: string)
    enew | setl buftype=nofile noswapfile bufhidden=hide
    if !empty(ft)
        exe 'setl ft=' .. ft
    endif
enddef

def SnippetInNewWindow(ft: string)
    exe printf('bel :%dnew', &cwh)
    setl buftype=nofile noswapfile
    setl bufhidden=hide
    if !empty(ft)
        exe 'setl ft=' .. ft
    endif
enddef

# run vim command; :KvimRun {vim_command}... {{{2
command! -nargs=+ -complete=command KvimRun ShowOutput(execute(<q-args>))

# vim expr; :KvimExpr {vim_expr}... {{{2
command! -nargs=+ -complete=expression KvimExpr ShowOutput(eval(<q-args>))

def ShowOutput(...data_: list<any>)
    # eval() return type may not be string, so use list<any> here.
    const data = type(data_[0]) == type('') ? data_[0] : string(data_[0])
    ScratchNew
    for line in split(data, "\n")
        append('$', line)
    endfor
    norm gg"_dd
enddef

# insert shebang based on filetype; :KshebangInsert [content after "#!/usr/bin/env "] {{{2
command! -nargs=* -complete=shellcmd KshebangInsert ShebangInsert(<q-args>)

g:vimrc_shebang_lines = {
    'awk': '/usr/bin/awk -f', 'javascript': 'node', 'lua': 'lua',
    'perl': 'perl', 'python': 'python', 'ruby': 'ruby',
    'scheme': 'scheme-run', 'sh': '/bin/sh', 'zsh': 'zsh',
    }

def ShebangInsert(args: string)
    const first_line = getline(1)
    if len(first_line) >= 2 && first_line[0 : 1] == '#!'
        throw 'shebang exists!'
    endif
    var shebang: string
    if !empty(args)
        shebang = args
    elseif has_key(g:vimrc_shebang_lines, &ft)
        shebang = g:vimrc_shebang_lines[&ft]
    else
        throw 'shebang: which interpreter to run?'
    endif
    if match(shebang, '^/') >= 0
        shebang = '#!' .. shebang
    else
        shebang = '#!/usr/bin/env ' .. shebang
    endif
    # insert at first line and leave cursor here (for further modification)
    normal ggO<Esc>
    var ret = setline(1, shebang)
    if ret == 0  # success
        normal $
    else
        throw 'setting shebang error!'
    endif
enddef

# match long line; :KmatchLongLine {number} {{{2
# Refer: https://stackoverflow.com/a/1117367
command! -nargs=1 KmatchLongLine exe ':/\%>' .. <args> .. 'v.\+'

# `J` with custom seperator; <visual>:J sep... {{{2
command! -nargs=1 -range J JoinLines(<q-args>)
def JoinLines(sep: string)
    const buf = @"
    try
        norm gv
        norm x
        @" = substitute(@", "\n", sep, 'g')
        norm P
    finally
        @" = buf
    endtry
enddef

# edit selected line / column; :Kjump {{{2
command! -nargs=+ Kjump JumpToLineCol(<args>)
def JumpToLineCol(line: number, col: number = 0)
    execute 'normal' line .. 'gg'
    if col > 1
        execute 'normal 0' .. (col - 1) .. 'l'
    endif
enddef

# Selection() {{{2
def g:Selection(): string
    const tmp = @"
    var result = ''
    var success = false
    try
        silent normal gvy
        success = true
    finally
        result = @"
        @" = tmp
        if !success
            throw 'g:Selection() failed!'
            # make type check happy.
            return result
        else
            return result
        endif
    endtry
enddef

# :SetCmdText / SetCmdText() {{{2
def g:SetCmdText(text: string)
    feedkeys(':' .. text, 't')
enddef

command! -nargs=+ SetCmdText g:SetCmdText(<q-args>)

# :KqutebrowserEditCmd {{{2
if !empty($QUTE_FIFO)
    command! KqutebrowserEditCmd KqutebrowserEditCmd()

    def KqutebrowserEditCmd()
        setl buftype=nofile noswapfile
        setline(1, $QUTE_COMMANDLINE_TEXT[1 :])
        setline(2, '')
        setline(3, 'hit `<Space>q` to save cmd (first line) and quit')
        # weired bug with `map ... \| q...` in vim9script.
        legacy nnoremap <buffer> <Space>q :call writefile(['set-cmd-text -s :' .. getline(1)], $QUTE_FIFO) \| q<CR>
    enddef
endif

# :Tmux {{{2
if exists("$TMUX")
    command! -nargs=1 -bar Tmux TmuxOpenWindow(<q-args>)

    def TmuxOpenWindow(args_: string)
        var args: string = args_
        const options = {'c': 'neww', 's': 'splitw -v', 'v': 'splitw -h'}
        var ch = match(args, '\s')
        var option: string
        if ch == -1
            [option, args] = [args, '']
        else
            [option, args] = [args[: ch], args[ch :]]
        endif
        option = get(options, trim(option))
        if empty(option)
            throw 'unknown option: ' .. args .. '; valid: ' .. join(keys(options), ' / ')
        endif
        call system("tmux " .. option .. " -c " .. shellescape(getcwd()) .. args)
    enddef
endif

# Cd <path> / :Cdalternate / :Cdhome / :Cdbuffer / :Cdproject [:]cmd... {{{2
command! -nargs=1 -complete=dir Cd Cd('', <q-args>)
command! -nargs=* -complete=command Cdalternate Cd('alternate', <q-args>)
command! -nargs=* -complete=command Cdhome Cd('home', <q-args>)
command! -nargs=* -complete=command Cdbuffer Cd('buffer', <q-args>)
command! -nargs=* -complete=command Cdproject Cd('project', <q-args>)

def Cd(flag: string, args: string)
    var cmd = args
    var path: string
    if flag == 'alternate'
        path = fnamemodify(bufname('#'), '%:p:h')
    elseif flag == 'home'
        path = expand('~')
    elseif flag == 'project'
        path = Cd_get_project_dir()
        if empty(path)
            throw 'project dir not found!'
        endif
    elseif flag == 'buffer'
        path = Cd_get_buf_dir()
    else
        if args =~ '^:'
            throw 'path argument is required!'
        endif
        # Cd: split argument as path & cmd
        path = substitute(args, '\v^(.{}) :.+$', '\1', '')
        cmd = args[len(path) + 1 :]
    endif

    if !empty(cmd)
        var old_cwd = getcwd()
        var buf = bufnr('')
        try
            # use buffer variable to store cwd if `exe` switch to new window
            b:vimrc_old_cwd = old_cwd
            silent exe 'lcd' fnameescape(path)
            exe cmd
        finally
            if buf == bufnr('')
                if exists('b:vimrc_old_cwd')
                    unlet b:vimrc_old_cwd
                endif
                silent exe 'lcd' fnameescape(old_cwd)
            endif
        endtry
    else
        exe 'lcd' fnameescape(path)
        if &buftype == 'terminal'
            term_sendkeys(bufnr(''), 'cd ' .. shellescape(path))
            if mode() == 'n'
                feedkeys('i', 't')
            endif
        endif
    endif
enddef

augroup vimrc
    au BufEnter * {
        # reset cd
        if exists('b:vimrc_old_cwd')
            try
                silent exe 'lcd' fnameescape(b:vimrc_old_cwd)
            finally
                unlet b:vimrc_old_cwd
            endtry
        endif
        }
augroup END

def Cd_get_buf_dir(): string
    var path = expand('%:p:h')
    if empty(path) || &buftype == 'terminal'
        path = getcwd()
    endif
    return path
enddef

def Cd_get_project_dir(): string
    var path = Cd_get_buf_dir()
    var parent: string
    while 1
        if isdirectory(path .. '/.git')
            return path
        endif
        if filereadable(path .. '/.git')
            # git submodule
            return path
        endif
        parent = fnamemodify(path, ':h')
        if path == parent
            return ''
        endif
        path = parent
    endwhile
    # unrechable
    return path
enddef

# terminal-api related user function {{{2
# sync terminal path to buffer path.
# TODO follow cd even when terminal buffer not in focus (with event?).
def g:Tapi_cd(nr: number, arg: list<string>)
    if bufnr() == nr
        var p = arg[0]
        if is_win32 && match(p, '^/') >= 0
            # why not using shellescape() here?
            p = execute(printf("Sh cygpath -w '%s'", substitute(p, "'", "'\\\\''", 'g')))
        endif
        silent execute 'lcd' fnameescape(p)
    endif
enddef

# :Jobrun / :Jobqfrun / :Jobstop / :Joblist / :Jobclear {{{2
command! -range=0 -nargs=+ Jobrun
| JobRun(<q-args>, {range: <range>, line1: <line1>, line2: <line2>, qf: false})
command! -range=0 -nargs=+ Jobqfrun
| JobRun(<q-args>, {range: <range>, line1: <line1>, line2: <line2>, qf: true})
command! -nargs=* -bang -complete=custom,JobStopComp Jobstop
| JobStop(<q-args>, <bang>0 ? 'kill' : 'term')
command! Joblist call JobList()
command! -count Jobclear call JobClear(<count>)

var job_dict = exists('job_dict') ? job_dict : {}

def JobOutCb(ctx: dict<any>, _: channel, msg: string)
    const buf = ctx.bufnr
    setqflist([], 'a', {nr: buf, lines: [msg]})
enddef

def JobExitCb(ctx: dict<any>, job: job, ret: number)
    const buf = ctx.bufnr
    var data = []
    add(data, '')
    add(data, '===========================')
    add(data, 'command finished with code ' .. ret)
    if ctx.qf
        setqflist([], 'a', {nr: buf, lines: data})
    else
        appendbufline(buf, '$', data)
    endif
enddef

def JobRun(cmd_a: string, opt: dict<any>)
    if exists(':Sh') != 2
        throw 'depends on vim-sh plugin!'
    endif
    if exists(':ScratchNew') != 2
        throw 'depends on `:ScratchNew`!'
    endif
    var cmd: string = cmd_a
    var flag: string = '-n'
    if match(cmd, '^-') >= 0
        var tmp = matchlist(cmd, '\v^(-\S+)\s+(.*)$')
        cmd = tmp[2]
        flag = tmp[1] .. 'n'
    endif
    var cmd_short = cmd
    if opt.range != 0
        cmd = printf(':%s,%sSh %s %s', opt.line1, opt.line2, flag, cmd)
    else
        cmd = printf('Sh %s %s', flag, cmd)
    endif
    var job_d = json_decode(execute(cmd))

    # in case running with ":Cd... [path]"
    extend(job_d.opt, {cwd: getcwd()})

    var bufnr: number
    if opt.qf
        var current_max = getqflist({nr: '$'}).nr
        bufnr = current_max + 1
        setqflist([], ' ',
        {
                title: '(:Joblist to check state) ' .. cmd_short, nr: bufnr,
        })
        extend(job_d.opt, {
            out_cb: function(JobOutCb, [{bufnr: bufnr}]),
            err_cb: function(JobOutCb, [{bufnr: bufnr}]),
            })
    else
        ScratchNew
        bufnr = bufnr()
        wincmd p
        extend(job_d.opt, {
            out_io: 'buffer', err_io: 'buffer',
            out_buf: bufnr, err_buf: bufnr,
            })
    endif
    extend(job_d.opt, {
        exit_cb: function(JobExitCb, [{bufnr: bufnr, qf: opt.qf}]),
        })

    extend(job_dict, {
        [bufnr]: {
            job: job_start(job_d.cmd, job_d.opt),
            cmd: cmd_short,
            }
        })
enddef

def JobStop(id_a: string, sig: string)
    var id = empty(id_a) ? bufnr() : str2nr(matchstr(id_a, '\v^\d+'))
    if has_key(job_dict, id)
        job_stop(job_dict[id].job, sig)
    else
        throw 'job not found: buffer id ' .. id
    endif
enddef

def JobStopComp(...arg: list<any>): string
    var result = []
    for [k, v] in items(job_dict)
        if v.job->job_status() == 'run'
            add(result, printf('%s: %s', k, v.cmd))
        endif
    endfor
    return join(result, "\n")
enddef

def JobList()
    for [k, v] in items(job_dict)
        echo printf("%s:\t%s\t%s", k, v.job, v.cmd)
    endfor
enddef

def JobClear(num: number)
    for item in num > 0 ? [num] : keys(job_dict)
        var job = get(job_dict, item)
        if !empty(job)
            if job.job->job_info().status != 'run'
                remove(job_dict, item)
            endif
        endif
    endfor
enddef

# :Mpc {{{2
if executable('mpc')
    command! Mpc Mpc()

    var mpc_prop_type = 'song'

    def Mpc()
        enew | setl filetype=mpc buftype=nofile noswapfile nobuflisted
        var buf = bufnr()
        prop_type_add(mpc_prop_type, {bufnr: buf})
        var i = 1
        for line in split(system('mpc playlist'), "\n")
            setline(i, line)
            prop_add(i, 1, {type: mpc_prop_type, id: i, bufnr: buf})
            i += 1
        endfor
        const nr = str2nr(system('mpc current -f "%position%"'))
        execute 'norm' nr .. 'G'
        nnoremap <buffer> <silent> <CR> <Cmd>call <SID>MpcPlay()<CR>
        # should we map <2-LeftMouse> to <CR> globally?
        nnoremap <buffer> <silent> <2-LeftMouse> <Cmd>call <SID>MpcPlay()<CR>
    enddef

    def MpcPlay()
        var props = prop_list(line('.'))
        if len(props) == 0
            return
        endif

        var prop = props[-1]
        if prop['type'] == mpc_prop_type
            job_start(printf('mpc play %d', prop.id))
        endif
    enddef
endif

# :ChdirTerminal [path]; default path: selection / <cfile>; expand() is applied; use existing terminal if possible; bang: using Sh -w (default: Sh -t) {{{2
# depends on g:Selection().
command! -bang -nargs=* -range=0 ChdirTerminal ChdirTerminal(<bang>false, <range>, <q-args>)

def ChdirTerminal(bang: bool, range: number, path_a: string)
    var path = path_a ?? ( range > 0 ? g:Selection() : expand('<cfile>') )
    if match(path, '\v^[~$<%]') >= 0
        path = ExpandHead(path)
    endif
    path = fnamemodify(path, ':p')
    if filereadable(path)
        path = fnamemodify(path, ':h')
    endif
    if !isdirectory(path)
        throw 'is not directory or not readable: ' .. path
    endif

    const bufs: list<number> = tabpagebuflist()
    if !bang
        for i in term_list()->filter(
            (_, x) => x->term_getstatus() == 'running'
            )
            const idx: number = index(bufs, i)
            if idx >= 0
                echo printf('chdir in window [%d]? [y/N] ', idx + 1)
                if nr2char(getchar())->tolower() == 'y'
                    execute ':' .. (idx + 1) 'wincmd w'
                    call feedkeys(printf('%scd %s', mode() == 'n' ? 'i' : '', shellescape(path)), 't')
                else
                    redrawstatus | echon 'cancelled.'
                endif
                return
            endif
        endfor
    endif
    const cmd = bang ? 'Sh -w' : 'Sh -t'
    execute 'Cd' path ':' .. cmd
enddef

# g:Popup(cmd: string, Cb: fn<list<string>>, ctx : dict = {}); {{{2
# NOTE: this depends on my vim-sh plugin;
#   g:Popup() cmd param is the shell command to run.

# variable used in popup terminal;
var popup_tmpfile: string = ''
var popup_win: number

def g:Popup(cmd: string, Cb: func, ...args: list<dict<any>>)
    var exec_pre: string = 'exec'
    var range: string = ''
    var kwargs: dict<any> = args->get(0) ?? {}
    if kwargs->has_key('input') || kwargs->has_key('ex')
        const stdin_f: string = tempname()
        if kwargs->has_key('input')
            writefile(kwargs.input->split("\n"), stdin_f)
        else
            writefile(execute(kwargs.ex)->split("\n"), stdin_f)
        endif
        exec_pre ..= (' < ' .. shellescape(stdin_f))
    endif
    if kwargs->get('range', 0) > 0
        range = printf(':%d,%d', kwargs.line1, kwargs.line2)
    endif
    var tmpfile: string = tempname()
    exec_pre ..= (' > ' .. shellescape(tmpfile))
    var res: dict<any> = json_decode(execute(printf('%sSh -n %s; %s', range, exec_pre, cmd)))

    # use builtin popup, then tmpfile can be set safely.
    # (popup terminal steals focus).
    popup_tmpfile = tmpfile
    var buf = term_start(res.cmd, extendnew(res.opt, {exit_cb: TermExitCb, hidden: true}))
    popup_win = popup_create(buf, {
        border: [1, 1, 1, 1],
        callback: function(PopupCloseCb, [Cb])
        }->extendnew(PopupSize()))
enddef

def TermExitCb(_: job, code: number)
    popup_close(popup_win, code == 0 ? readfile(popup_tmpfile) : [])
enddef

def PopupCloseCb(Cb: func, _: number, result: list<string>)
    # TODO is this check required?
    if !empty(result)
        call(Cb, [result])
    endif
enddef

# :Select ... {{{2
command! -nargs=1 -range=0 -complete=custom,SelectComp Select
| Select(<q-args>, {range: <range>, line1: <line1>, line2: <line2>})

# Select() and it's comp {{{3
def SelectComp(..._: list<any>): string
    return popup_sources->keys()->join("\n")
enddef

def Select(source: string, ctx: dict<any>)
    if popup_sources->has_key(source)
        call(popup_sources[source], [ctx])
    else
        throw printf('selection not implemented: "%s"!', source)
    endif
enddef

# LsBuffers() {{{3
def LsBuffers(ctx: dict<any>)
    g:Popup(
    'fzf',
    (s: list<string>) => {
        const bufnr = s[0]->matchstr('\v^\s*\zs(\d+)\ze')
        execute ':' .. bufnr .. 'b'
        },
    {ex: 'ls', title: 'select-buffer'}
    )
enddef

# Color() {{{3
def Color(ctx: dict<any>)
    g:Popup(
    'fzf',
    (s: list<string>) => {
        execute 'color' fnameescape(s[0])
        },
    {
            title: 'select-color',
            input: globpath(&rtp, "colors/*.vim", 0, 1)
            ->mapnew((_, i) => i->split('[\/.]')->get(-2))->join("\n")
    }
    )
enddef

# HistList() {{{3
def HistBlacklist(s: string): bool
    if !filereadable(s) && !filereadable(ExpandHead(s))
        return true
    endif
    var lists =<< trim END
    COMMIT_EDITMSG
    ADD_EDIT.patch
    addp-hunk-edit.diff
    git-rebase-todo
    END
    add(lists, $VIMRUNTIME)
    for i in lists
        if match(s, i) >= 0
            return true
        endif
    endfor
    return false
enddef

def HistList(ctx: dict<any>)
    var input = v:oldfiles
    # expand ~, so it works with "fzf -q" option.
    ->mapnew((_, i) => ExpandHead(i))
    ->extendnew(
    execute('Sh sort ~/.cache/file_history 2>/dev/null | uniq -c | sort -n | sed -E "s/^\s+[0-9]+\s+//"')
    ->split("\n")
    )
    ->filter((_, i) => !HistBlacklist(i))
    ->join("\n")

    g:Popup(
    # -q STR: start with query (limit to cwd).
    # leading ^ and following / to make query more precise;
    # final space to make additional query work as expected.
    printf('fzf -q "^"%s/" "', shellescape(getcwd())),
    (s: list<string>) => {
        execute 'e' fnameescape(s[0])
        },
    ctx
    ->extendnew({title: 'select-hist_list'})
    ->extend({input: input})
    )
enddef

# FileList() {{{3
def FileList(ctx: dict<any>)
    g:Popup(
    'fzf',
    (s: list<string>) => {
        execute 'e' fnameescape(s[0])
        },
    ctx
    ->extendnew({title: 'select-filelist'})
    )
enddef

# Nnn() (it's nnn.) {{{3
def Nnn(ctx: dict<any>)
    g:Popup(
    # wrap nnn with `sh -i`, so term won't get messy.
    # seems like a bug in busybox sh and macos bash.
    (executable('zsh') ? 'zsh' : 'sh')
    .. ' -ic "nnn -o -p -"',
    (s: list<string>) => {
        execute 'e' fnameescape(s[0])
        },
    ctx
    ->extendnew({title: 'nnn'})
    )
enddef

# ProjectList() {{{3
# NOTE: this variable is directly put after `find` command,
# using shell syntax. QUOTE IT IF NECESSARY!
g:project_dirs = get(g:, 'project_dirs', '~/repos ~/vimfiles')

# accept list<string>; every item is put after -name (or -path, if / included)
g:project_blacklist = get(g:, 'project_blacklist', ['venv', 'node_modules'])

def ProjectList(ctx: dict<any>)
    if empty(g:project_dirs)
        throw '`g:project_dirs` is not set or empty!'
    endif
    if type(g:project_blacklist) != type([])
        throw '`g:project_blacklist` should be list<string>!'
    endif

    var blacklist = ''
    for i in g:project_blacklist
        if match(i, is_win32 ? '\v[/\\]' : '/') >= 0
            blacklist ..= printf('-path %s -prune -o ', shellescape(i))
        else
            blacklist ..= printf('-name %s -prune -o ', shellescape(i))
        endif
    endfor
    g:Popup(
    printf(
    'find %s %s -name .git -prune -print 2>/dev/null | sed -E "s/\/.git\$//"'
    .. ' | fzf',
    g:project_dirs, blacklist,
    ),
    (s: list<string>) => {
        execute 'lcd' fnameescape(s[0])
        if exists(':Dirvish') == 2
            execute 'Dirvish' fnameescape(s[0])
        endif
        },
    ctx
    ->extendnew({title: 'project'})
    )
enddef

# TabWin() {{{3
def TabWin(ctx: dict<any>)
    var buf_list = []  # preserve order
    var key: string
    for i in range(tabpagenr('$'))
        var j = 0
        for buf in tabpagebuflist(i + 1)
            key = printf('%d %d', i + 1, j + 1)
            buf_list->add(key .. ' ' .. bufname(buf))
            j = j + 1
        endfor
    endfor
    g:Popup(
    'fzf --tac',
    (s: list<string>) => {
        const res = s[0]->split(' ')
        const [tab, win] = [res[0], res[1]]
        execute printf(':%stabn', tab)
        execute printf(':%swincmd w', win)
        },
    {
            title: 'select-win',
            input: buf_list->join("\n"),
    }
    )
enddef

# CdHistory {{{3
def CdHistory(ctx: dict<any>)
    g:Popup(
    'zsh -ic j',
    (s: list<string>) => {
        var path = s[-1]
        if path->trim()->empty()
            return
        endif
        if path->isdirectory()
            execute 'lcd' fnameescape(path)
            if exists(':Dirvish') == 2
                execute 'Dirvish' fnameescape(path)
            endif
        else
            echoerr 'dir not valid: ' .. path
        endif
        },
    {
            title: 'select-dir-to-cd',
    }
    )
enddef

# register new source here! {{{3
var popup_sources: dict<func> = {
    buffer: LsBuffers,
    color: Color,
    fzf: FileList,
    hist_list: HistList,
    project: ProjectList,
    tab_win: TabWin,
    }

if executable('zsh')
    popup_sources['cd'] = CdHistory
endif

if executable('nnn')
    popup_sources['nnn'] = Nnn
endif

# (keymap) popup to select from sources. {{{3
nnoremap <Space>a <Cmd>call <SID>SelectFromSources()<CR>

def SelectFromSources()
    # TODO highlight
    const selection = [
        # [key, popup_sources]
        ['w', 'nnn'],
        ['s', 'hist_list'],
        ['f', 'fzf'],
        ['e', 'project'],
        ['b', 'buffer'],
        ['t', 'tab_win'],
        ['c', 'cd'],
        ]
    # some sources may be missing, so check it.
    ->filter((_, i) => !empty(popup_sources->get(i->get(1))))

    # Is is possible to use ordered dict, so we migrate selection /
    # selection_dict?
    var selection_dict = {}
    var lists = []
    for [k, v] in selection
        add(lists, printf('[%s] %s', k, v))
        selection_dict[k] = v
    endfor
    popup_create(lists, {
        pos: 'center',
        title: 'Select... (any other key to quit)',
        minwidth: min([40, &columns / 2]),
        border: [1, 1, 1, 1],
        mapping: false,
        filter: (winid: number, key: string): bool => {
            const res = get(selection_dict, key)
            if !empty(res)
                execute 'Select' res
            endif
            # finally.
            popup_close(winid)
            return true
            }
        }
    )
enddef

# scratch-mode terminal in popup (keymap: <Space>t) {{{2
# TODO: support jump to buffer dir.
nnoremap <Space>t <Cmd>call <SID>PopupTerminalSwitch()<CR>

# save state across ":so $MYVIMRC"
var popup_terminal_state: dict<any> = exists('popup_terminal_state') ? popup_terminal_state :
{winid: -1, buf: -1, shown: false, buf_last: -1}

augroup vimrc
    au User vim-jump {
        if expand('<abuf>')->str2nr() == popup_terminal_state.buf
            PopupTerminalSwitch()
        endif
        }
augroup END

def PopupTerminalSwitch()  # {{{
    if popup_terminal_state.shown
        popup_close(popup_terminal_state.winid)
        popup_terminal_state.shown = false
    else
        if popup_terminal_state.buf < 0
            const cmd = &shell
            var env = exists('g:vimserver_env') ? g:vimserver_env : {}
            # avoid setting original variables.
            env = env->copy()
            # in ~/.config/zshrc, we check $VIMSERVER_POPUP to un-export
            # vimserver related env, so vim won't be recognized as client
            # (which causes trouble in popup window).
            env['VIMSERVER_POPUP'] = '1'
            popup_terminal_state.buf = term_start(cmd, {
                env: env,
                hidden: true, term_finish: 'close',
                exit_cb: ((_, _) => {
                    popup_terminal_state.shown = false
                    popup_terminal_state.buf = -1
                    })
                })
        endif
        popup_terminal_state.buf_last = bufnr()
        popup_terminal_state.winid = popup_create(popup_terminal_state.buf, {
            border: [1, 1, 1, 1],
            }->extendnew(PopupSize()))
        command! -buffer Cdalternate {
            term_sendkeys(
            popup_terminal_state.buf, 'cd ' .. shellescape(
            fnamemodify(bufname(popup_terminal_state.buf_last), ':p:h')
            ))
            if mode() == 'n'
                feedkeys('i', 't')
            endif
            }
        command! -buffer Cda Cdalternate
        TerminalSetup()
        popup_terminal_state.shown = true
    endif
enddef  # }}}

# sv() helper (in vim embedded terminal) {{{2
def g:Tapi_shell_sv_helper(...arg: list<any>)
    feedkeys("\<C-\>\<C-n>", 'n')
enddef

# finish {{{1 }}}1
defc  # show error in this file early.
# TODO {{{1
# - replace g:Popup() / :Select with vim-fuzzy.

# vim:fdm=marker:tw=78:sw=4
