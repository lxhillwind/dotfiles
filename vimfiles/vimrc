if !has('vim9script') | throw 'vim9script feature not detected!' | endif
vim9script noclear

# not loaded plugins in dotfiles repo (may be used on demand):
# vim-plug
# vader.vim

# helper function / const {{{1

# expand() should NOT be used to expand arbitrary file (like containing
# "[b-a]" in filename).
def ExpandHead(s: string): string
    if match(s, '\v^[%#<]') == 0
        return expand(s)
    elseif match(s, '\v^\~') == 0
        return expand('~') .. s[1 : ]
    elseif match(s, '\v^\$\ze[a-zA-Z_]') == 0
        const idx = match(s, '\v([^a-zA-Z_]|$)', 1)
        return expand(s[: idx - 1]) .. s[idx : ]
    endif
    return s
enddef

def g:ExpandHead(s: string): string
    return ExpandHead(s)
enddef

def TrSlash(s: string): string
    if has('win32')
        return substitute(s, '\', '/', 'g')
    else
        return s
    endif
enddef

const is_win32 = has('win32')
const is_linux = has('linux')
const is_mac = has('mac')
const is_wsl = executable('/mnt/c/Windows/notepad.exe')
const has_gui = has('gui_running') || is_mac || is_win32
    || (is_linux && (
        # desktop
        !empty($DISPLAY) || !empty($WAYLAND_DISPLAY)
        # android
        || executable('/data/data/com.termux/files/usr/bin/termux-open')
    ))

const is_conemu = is_win32 && !has('gui_running') && $CONEMUANSI ==? 'ON'

augroup vimrc
    au!
augroup END

# Plugins {{{1

set pp^=~/vimfiles

# disable default plugin {{{
g:loaded_2html_plugin = 1
g:loaded_getscriptPlugin = 1
g:loaded_gzip = 1
g:loaded_logiPat = 1
g:loaded_netrwPlugin = 1
g:loaded_tarPlugin = 1
g:loaded_vimballPlugin = 1
g:loaded_zipPlugin = 1  # }}}

# config definition for plugins not added via `:packadd[!]` {{{
g:tasks_config_paths =<< trim END
    ~/vimfiles/config/tasks.ini
    ~/vimfiles/config/tasks-local.ini
END
g:tasks_config_paths
    ->map((_, i) => expand(i))
    ->filter((_, i) => filereadable(i))

g:markdown_folding = 1
g:markdown_fenced_languages = [
    'awk', 'python', 'sh', 'vim',
    'c', 'go', 'javascript',
    'dosini', 'json', 'yaml',
    'zig',
]
# }}}

# use matchit, so vim9 filetype indent work as expected.
# https://github.com/vim/vim/issues/7628
packadd! matchit

# use bundled comment plugin.
# use ":silent!" since the plugin is introduced in quite recent commit.
silent! packadd! comment

# use ":silent!" since the plugin is introduced in quite recent commit.
silent! packadd! helptoc

# my {{{2
packadd! vim-jump
packadd! vim-sh
packadd! base16-dynamic.vim
packadd! lf.vim
packadd! vim-fuzzy
packadd! table-im
g:table_im#auto_commit = true
g:table_im#table_file = () => {
    for i in [
            '~/vimfiles/config/flypy.ini',
            '~/notes-local/赴번쪽-related/flypy.ini',
    ]
        const p = expand(i)
        if filereadable(p)
            return p
        endif
    endfor
    return ''
}()
g:table_im#table_second = () => {
    for i in [
            '~/vimfiles/config/shanren.ini',
            '~/notes-local/赴번쪽-related/shanren.ini',
    ]
        const p = expand(i)
        if filereadable(p)
            return p
        endif
    endfor
    return ''
}()
# }}}2

packadd! securemodelines
packadd! tabular

# directory viewer
# use vim-dirvish previously; now use my lf.vim plugin instead.
g:loaded_netrwPlugin = 1

# motion
packadd! vim-sneak
g:sneak#label = 1
# sneak unmap f / t when one of them is pressed after sneak key. {{{
# MRE:
#   :map t <Nop><CR>
#   sssff
#   :map t
# then mapping for t disappeared.
#
# But I need f_reset / t_reset!
# So leave them as default (1); and do not map f / t.
#g:sneak#f_reset = 0
#g:sneak#t_reset = 0
# }}}
# I do not use vim-surround, so preserve s / S for vim-sneak.
xmap S <Plug>Sneak_S
omap s <Plug>Sneak_s
omap S <Plug>Sneak_S

# clipboard
const use_oscyank = !(has_gui || !empty($TMUX))
if use_oscyank
    packadd! vim-oscyank
endif

# git url
packadd! vim-gh-line
g:gh_line_map_default = 0
g:gh_line_blame_map_default = 0
if !has_gui
    # echo url only.
    g:gh_open_command = ''
endif
command! GitRepoUrl feedkeys("\<Plug>(gh-repo)")

# filetype / syntax
packadd! vim9-syntax
packadd! vim-tridactyl
packadd! vim-markdown-folding
g:markdown_fold_style = 'nested'
g:markdown_fold_override_foldtext = 0
# default yaml syntax is quite slow.
packadd! vim-yaml

# snippet (it uses <C-j> in normal / insert select mode)
packadd! miniSnip
# security: do not load snippets from cwd.
g:miniSnip_local = ''
# avoid creating key mapping.
g:miniSnip_complkey = ''

# completion {{{2
# non-lsp {{{
# the most important setting:
set autocomplete
# avoid i / t in 'cpt', since it may mess status bar when completion starts.
set cpt=.,w,b,u
# script function in 'complete' (F<s-func>) will not work when changing setting
# outside script; so use autoload function instead.
import autoload './autoload/completor.vim'
set complete+=Fcompletor.FminiSnip
set complete+=Fcompletor.Fpath
set complete+=k^10
# should omnifunc (semantic completion) be used as first or last?
set complete^=o
# don't select the first item: noselect;
# make completion show additional data: popup;
# ("preview" shows data in a vim window, so it is not used.)
set completeopt=menu,menuone,noselect,popup,fuzzy
# suppress annoy messages.
set shortmess+=c

packadd! vim-dict
# always enable dict completion. (i_<Ctrl-x><Ctrl-k>)
execute 'set dict+=' .. globpath(&rtp, 'dict/text.dict', 0, 1)->get(0, '')->fnameescape()
# }}}

# lsp configuration helper function {{{
# convert {"x.y.z": xx} to {"x": {"y": {"z": xx} }}
# (vscode configuration style to canonical)
def ExpandJsonPtr(d: dict<any>): dict<any>
    var result = {}
    for [k_old, v] in items(d)
        var k: string = k_old
        var ptr: any = result
        while true
            const dot = match(k, '\V.')
            if dot > 0
                const key = k[ : dot - 1]
                if !has_key(ptr, key)
                    ptr[key] = {}
                endif
                ptr = ptr[key]
                k = k[dot + 1 : ]
            else
                ptr[k] = v
                break
            endif
        endwhile
    endfor
    return result
enddef

# for debug
#def g:ExpandJsonPtr(d: dict<any>): dict<any>
#    return ExpandJsonPtr(d)
#enddef
# }}}

# lsp server configuration {{{
const lspConfigDict = {
    ansible: {
        filetype: ['yaml.ansible'],
        path: 'ansible-language-server',
        args: ['--stdio'],
    },
    golang: {
        filetype: ['go', 'gomod'],
        path: 'gopls',
        args: ['serve'],
        syncInit: true,
    },
    python: {
        filetype: ['python'],
        path: (
            (!is_win32 && executable('pylsp')) ?
            expand('~/bin/pylsp-env-helper') :
            'pylsp'
        ),
        args: [],
        # https://github.com/python-lsp/python-lsp-server/blob/develop/CONFIGURATION.md
        workspaceConfig: ExpandJsonPtr({
            # disable (default enabled) style checking plugin:
            'pylsp.plugins.pyflakes.enabled': false,
            'pylsp.plugins.pycodestyle.enabled': false,
            # pylint reports [no-member], which is necessary;
            'pylsp.plugins.pylint.enabled': true,
            # only report error
            'pylsp.plugins.pylint.args': ['-E'],
        }),
    },
    scala: {
        filetype: ['scala'],
        path: 'metals',
        args: [],
    },
    typescript: {
        filetype: ['typescript', 'typescriptreact'],
        path: 'typescript-language-server',
        args: ['--stdio'],
    },
    ziglang: {
        filetype: ['zig'],
        path: 'zls',
        args: [],
    },
} # }}}
# allow extending / overriding from $MYVIMRC with var g:vimrc_lsp_config
->extend(exists('g:vimrc_lsp_config') ? g:vimrc_lsp_config : {})

# load lsp on demand {{{
for ft in lspConfigDict->values()->mapnew((_, i) => i.filetype)->flattennew()->sort()->uniq()
    execute $'au FileType {ft} LspSetup()'
endfor

var lsp_is_started: dict<bool> = {}
def LspSetup()
    if exists('g:coc_enabled') && g:coc_enabled
        return
    endif
    if !lsp_is_started->get(&ft, false)
        var config = {}
        for [k, v] in lspConfigDict->items()
            if v.filetype->index(&ft) >= 0
                const exepath = exepath(v.path)
                if empty(exepath)
                    return
                endif
                config = copy(v)
                config.path = exepath
                break
            endif
        endfor
        if empty(config)
            return
        endif
        lsp_is_started[&ft] = true
        if exists(':LspHover') != 2
            # lsp plugin is not loaded yet.
            # no ! here.
            packadd lsp
            g:LspOptionsSet({
                # :help lsp-options
                showDiagWithSign: false,
                # avoid mapping <cr>
                noNewlineInCompletion: true,
                # use omnifunc: performance largely improved after this patch.
                autoComplete: !has('patch-9.1.1825'),
            })
        endif
        g:LspAddServer([config])
    endif

    # gq
    setlocal formatexpr=lsp#lsp#FormatExpr()
    # K
    setlocal keywordprg=:LspHover
    # ctrl-]
    setlocal tagfunc=lsp#lsp#TagFunc

    nnoremap <buffer> <silent> [g :LspDiag prev<CR>
    nnoremap <buffer> <silent> ]g :LspDiag next<CR>

    nnoremap <buffer> <silent> gd :LspGotoDefinition<CR>
    nnoremap <buffer> <silent> gy :LspGotoTypeDef<CR>
    nnoremap <buffer> <silent> gi :LspGotoImpl<CR>
    nnoremap <buffer> <silent> gr :LspShowReferences<CR>
enddef
# }}}

# coc.nvim setup {{{
# - install from https://github.com/neoclide/coc.nvim;
#
# - recommend plugin:
#     CocInstall coc-json coc-pairs

augroup vimrc
    au User CocNvimInit CocSetup()
augroup END

def CocSetup()
    augroup vimrc
        # Highlight the symbol and its references when holding the cursor
        autocmd CursorHold * silent call g:CocActionAsync('highlight')
        autocmd InsertEnter * {
            if !exists('b:vimrc_noautocomplete')
                try
                    b:vimrc_noautocomplete = g:CocHasProvider('codeAction')
                    if b:vimrc_noautocomplete
                        setl noautocomplete
                    endif
                catch
                endtry
            endif
        }
    augroup END

    set formatexpr=CocAction('formatSelected')
    &keywordprg = ":call g:CocActionAsync('doHover') | \""
    set tagfunc=CocTagFunc

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    var cocLspConfig = {}
    for [k, v] in lspConfigDict->items()
        if executable(v.path)
            cocLspConfig[k] = {
                command: v.path,
                args: v.args,
                filetypes: v.filetype,
            }
        endif
    endfor

    # these settings take higher priority than :CocConfig, but can be
    # overwritten by another coc#config().
    coc#config('suggest.noselect', true)
    coc#config('diagnostic.enableSign', false)
    coc#config('suggest.minTriggerInputLength', 2)
    coc#config('languageserver', cocLspConfig)
enddef
# }}}
# }}}2

# NOTE: plugin loading should be put **before** this. (see :help packadd)
# NOTE: filetype related autocmd should be put **after** this.
filetype plugin indent on
if !exists('g:syntax_on')
    syntax on
endif

# vimrc Detection {{{1

# Error if reading system-vimrc. {{{
# Some distribution's system-vimrc (like openSUSE) does sth,
# like set mapping, add autocmd.
# Some of these settings are good, but we want to keep these setting in vimrc
# (so it works for other distribution).
# To avoid duplicate setting, we just disable loading system-vimrc.
#
# Suggestion: put `exec /usr/bin/vim -Nu ~/vimfiles/vimrc "$@"` in ~/bin/vim,
# and add ~/bin in $PATH (before /usr/bin), so ~/bin/vim wins.
#
# In some environment (like git-for-windows), it is hard to put custom vim in
# $PATH.
# set vim variable g:vimrc_allow_system or env VIMRC_ALLOW_SYSTEM to 1 to skip check.
#
# Inspection of some distros' system vimrc:
#   git-for-windows:
#     - add autocmd to recover jump; safe to duplicate.
#   openSUSE:
#     - autocmd to recover jump (it's ok);
#     - some key mapping to cause <Ctrl-[> delay, this is not acceptable!
# }}}
const first_vimrc = execute('scr')->split("\n")->get(0)
    ->substitute('\v^.{-}:\s*', '', '')
    ->ExpandHead()
    ->TrSlash()

if has('vim_starting') && exists('$MYVIMRC') && first_vimrc != TrSlash($MYVIMRC)
    if !(
            !empty(get(g:, 'vimrc_allow_system'))
            || !empty($VIMRC_ALLOW_SYSTEM)
            )
        throw 'system-vimrc is read. skip loading vimrc!'
    endif
endif

if !exists('$MYVIMRC')
    # If we use `vim -u ...`, $MYVIMRC will not be set.
    # make ":e $MYVIMRC" work.
    $MYVIMRC = first_vimrc
endif

# Tiny build options {{{1

set nomodeline
set backspace=2
set expandtab
set shiftwidth=4
set number
set relativenumber
set hlsearch
set incsearch
set timeoutlen=5000
set ttimeoutlen=0
set cursorcolumn
set cursorline
set laststatus=1
set showcmd
set wildmenu
set shortmess-=S
set encoding=utf-8
set fileformats=unix,dos

# See: http://edyfox.codecarver.org/html/vim_fileencodings_detection.html
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

# Option {{{1

# &rtp {{{2
# why not using = here? since we may want to add package before souring this
# file; `set rtp=XXX` here will cause problem.
set rtp^=~/vimfiles
set rtp+=~/vimfiles/after

# add ~/bin to $PATH {{{2
# Even when set ~/bin in $PATH via ~/.config/zshrc, it may not be added when
# invoking gvim from desktop session, then ":sh" / ":Sh" / ":term" may not
# work for command defined in ~/bin.
# So add it to $PATH in vim explicitly.
const env_path_sep = is_win32 ? ';' : ':'
const home_bin = expand('~/bin')
if index($PATH->split(env_path_sep), home_bin) < 0
    $PATH = home_bin .. env_path_sep .. $PATH
endif

# win32 environment prepare {{{2
if is_win32 && has('vim_starting')
    # Set shellslash, so file path completion returns slash based str, {{{
    # which works in sh environment and win32 shell (cmd is not supported?).
    # shellescape() also returns unix-shell-friendly string.
    # Windows XP does not like slash path; let's handle it in ":Start"
    # UserCommand. }}}
    set shellslash

    # set env for cygwin / msys2 shell (start via :!): $VIM, $MYVIMRC... {{{
    # It's better to override $VIM / $VIMRUNTIME via shell startup, so cygwin
    # vim has correct $VIM set (/usr/share/vim). }}}
    $VIM = TrSlash($VIM)
    $VIMRUNTIME = TrSlash($VIMRUNTIME)
    $MYVIMRC = TrSlash($MYVIMRC)

    # $HOME should be set to make git bash find ~.
    if !exists('$HOME')
        $HOME = TrSlash($USERPROFILE)
    else
        $HOME = TrSlash($HOME)
    endif

    # set &shell, and add dir of it to $PATH. {{{
    # console vim and gvim handle &shell differently:
    # When &shell contains whitespace and not quoted, console vim does not
    # work with ":!..." command: it calls _wsystem() currently, while in gvim
    # it calls CreateProcess(); Most importantly, quoting is handled
    # differently.
    # So only set shell when it does not contain special char.
    #
    # To make things simpler, use git path to find bash.
    # Then git should be installed where path does not contain speical char.
    #
    # NOTE: busybox sh cannot handle CJK correctly (chcp.exe / utf-8). Use
    # cygwin / msys2 derived shell (fullset) if possible.
    # }}}

    def Exepath(program: string): string  # {{{
        # exepath(xxx) returns xxx in current dir, which is not desired.
        # so let's wrap it; NOTE: `.exe` suffix should be set in param.
        for i in globpath($PATH->substitute('\', '/', 'g')->substitute(';', ',', 'g'), program, 0, 1)
            if i->match('\v[\/]') >= 0  # not in current dir
                return i
            endif
        endfor
        return ''  # not found
    enddef  # }}}

    def WindowsShellSetting() # {{{
        const git_path = Exepath('git.exe')->substitute('\', '/', 'g')

        if !(
                execute(':verbose set shell?')->split("\n")->get(-1)
                ->match('^\s*Last set from') < 0
                || &shell->match('^/') >= 0)
            # only set shell if it is not set or set to invalid value (like
            # /bin/sh when invoking from busybox shell).
            return
        endif

        if empty(git_path)
            # try busybox before giving up.
            if !Exepath('busybox.exe')->empty()
                &shell = 'busybox sh'
            endif
            return
        endif

        # git.exe, when invoking from git bash, has different paths. {{{
        # checking 4 times is enough.
        # $ find ./ -name git.exe  # from git root dir
        # ./bin/git.exe
        # ./cmd/git.exe
        # ./mingw64/bin/git.exe
        # ./mingw64/libexec/git-core/git.exe
        # }}}
        var depth = 4
        var git_root = git_path
        while depth > 0
            depth -= 1
            git_root = fnamemodify(git_root, ':h')
            if executable(git_root .. '/usr/bin/bash')
                break
            endif
        endwhile

        const bash_path = git_root .. '/usr/bin/bash'
        if !executable(bash_path)
            echoerr 'vimrc: bash not found in git dir; using MinGit?'
            return
        endif
        if bash_path->match(' ') >= 0
            # git-for-windows default install location contains whitespace.
            &shell = '"' .. bash_path .. '"'
        else
            &shell = bash_path
        endif
        if fnamemodify(exepath('find'), ':h') != fnamemodify(bash_path, ':h')
            # always add dir of shell to $PATH, so tools like find wins. {{{
            # (it will be messy when calling win32 find.exe in unix shell)
            # When running cygwin / msys2 shell via :!, bash_path here will be
            # translated to /usr/bin, which is feasible. }}}
            $PATH = fnamemodify(bash_path, ':h') .. ';' .. $PATH
        endif
    enddef # }}}

    WindowsShellSetting()

    # vim-sh config; busybox sh rc
    $ENV = expand('~/.config/zshrc')

    # set &shell related options. {{{
    # NOTE: to use '"' correctly, all '"' should be escaped with '\'.
    # like this:
    #   :!echo \"hello world\"
    # (so just use :Sh if possible: it is more user friendly, and does not
    # depend on &shell related setting) }}}
    if &shell->match('\v(bash|zsh|busybox(|.exe) sh)(|.exe)$') >= 0
        # these settings are from vim_faq, modified.
        # https://vimhelp.org/vim_faq.txt.html#faq-33.6
        &shellcmdflag = '-c'
        # shq seems to modify excmd very early; use sxq instead.
        &shellquote = ''
        &shellxquote = '"'
        # sxe take effect even when sxq is not "(", so set it to empty.
        # see vim-sh (search ":!start") for details.
        &shellxescape = ''
        # shellpipe / shellredir seems not required.
    endif
endif

# macvim {{{2
if has('gui_macvim') && has('vim_starting')
    set gfn=Monaco:h14
    for i in 'abcdefghijklmnopqrstuvwxyz1234567890'
        execute $"map \<D-{i}> \<M-{i}>"
        execute $"map! \<D-{i}> \<M-{i}>"
        execute $"tmap \<D-{i}> \<M-{i}>"
    endfor
    # adjust $PATH, like homebrew, python venv which are set via shell.
    $PATH = system("zsh -ic 'echo $PATH'")->trim()
endif

# Leader key {{{2
# set leader / localleader to unused key, so plugin is hardly to clash with
# our key.
# Refer: lacygoill's vimrc.
g:mapleader = "\<S-F10>"
g:maplocalleader = "\<S-F11>"

# use <Space> as *true* leader key.
noremap <Space> <Nop>

# shell {{{2
# 'shelltemp' or 'noshelltemp': {{{
# - In win32 gui, 'noshelltemp' makes ":!" and ":[range]w !" work like in unix:
# no external cmd window;
# (if guioptions contain '!', ":!" will not show cmd window anyway.)
#
# but encoding cannot be detected (e.g. in "r !")
#
# - In unix, 'noshelltemp' makes ":[range]w !" not create tempfile;
#
# but if guioptions contain '!', ":r !" would not write content to buffer.
#
# So do not change 'shelltemp' option (default on).
# }}}

if !is_win32
    const zsh_path = is_mac ? '/opt/homebrew/bin/zsh' : '/bin/zsh'
    if executable(zsh_path)
        &shell = zsh_path
    endif
endif

# cmdline completion {{{2
# defined here instead of legacy, since it is available only after version 8.x
set wildoptions=pum,fuzzy
if has('win32unix')
    # restore 'wildmode' since git bash sets it in /etc/vimrc,
    # which makes menu selection disabled.
    set wildmode&vim
endif

# builtin terminal enhancement {{{2
def TerminalPaste()
    echo @"
    if @"[-1 : ] == "\n"
        echohl WarningMsg
        echo '<Newline> at end!'
        echohl NONE
    endif
    echo 'paste in terminal? (cursor may be at wrong place!) [y/N] '
    if tolower(nr2char(getchar())) == 'y'
        feedkeys("i\<C-w>" .. '""', 'n')
        redraws | echon 'pasted.'
    else
        redraws | echon 'cancelled.'
    endif
enddef

# define a function, so it can also be used in popup terminal.
def TerminalSetup()
    if &buftype != 'terminal'
        return
    endif
    setl nonu | setl nornu
    # plugin/jump.vim
    nmap <buffer> <CR> <Plug>(jump_to_file)
    xmap <buffer> <CR> <Plug>(jump_to_file)
    # clipboard
    nnoremap <buffer> p <ScriptCmd>TerminalPaste()<CR>
    nnoremap <buffer> P <ScriptCmd>TerminalPaste()<CR>
    if exists(':Lf') == 2
        nnoremap <buffer> - <Cmd>execute 'Lf' getcwd()<CR>
    endif
enddef

augroup vimrc
    au TerminalWinOpen * TerminalSetup()
augroup END

# window title {{{2
set title

# statusline {{{2
set ruler
&rulerformat = '%20('
    .. '%M'
    .. ' <%B>'
    .. ' %l:%{charcol(".")}%V'
    .. '%='
    .. '%P'
    .. '%)'

# viminfo {{{2
# &viminfo should be set with ^= (the first match will be used) {{{
# according to source code.
# (in file src/viminfo.c, function find_viminfo_parameter())
#
# if option is already present (like '1000), reset (like :so $MYVIMRC) would
# do nothing.
# }}}
set viminfo^='1000

# set locale {{{2
# DO NOT set lang for unix system (mainly linux?);
# since it affects locale of subprocess (like calling gui program from vim).
if is_win32
    # for msys2 / git-for-windows, set $LANG to make CJK display correctly.
    $LANG = 'en_US.UTF-8'
    # when libintl.dll is not available, message translation is disabled.
    # so no need to set "$LANG = 'en'". (see :help win32-gettext)
endif

# foldmethod {{{2
# it's too easy to use vim style folder in various text file.
# just set fdm=marker as default.
if has('vim_starting')
    set fdm=marker
endif

# sessionoptions; better ":mksession" option. {{{2
# do not include options in ssop; {{{
# since it breaks mapping with <ScriptCmd>. (like vim-fuzzy)
# Maybe we can use other way to dump mapping.
# }}}
set ssop=blank,curdir,folds,help,tabpages,winsize,terminal

# various vim dir & file {{{2
# copy from https://github.com/mhinz/vim-galore#temporary-files (modified)
# backup files
set backup
&backupdir = expand('~/.vim/files/backup' .. '//')
set backupext=-vimbackup
set backupskip=
# swap files
&directory = expand('~/.vim/files/swap' .. '//')
# use default value
#set updatecount =100
# undo files
set undofile
&undodir = expand('~/.vim/files/undo/')
# viewdir (:mkview / :loadview)
&viewdir = expand('~/.vim/files/view/')
# viminfo files
&viminfofile = expand('~/.vim/files/viminfo')

# create directory if needed
for t_dir in [
        &backupdir, &directory, &undodir, &viewdir,
        expand('~/.vim/sessions/'),
        expand('~/.vim/scratch/'),
        ]
    if !isdirectory(t_dir)
        mkdir(t_dir, 'p')
    endif
endfor

# disable some feature
set nobackup
set noundofile

# alt key in terminal {{{2
if !has('gui_running') && !is_win32
    # disable "kitty" protocol since it makes option-hjkl not work.
    set kpc=xterm:mok2

    # disable "modifyOtherKeys" since it makes option-hjkl in wezterm
    # (and maybe more terminal emulators) not work.
    &t_TI = ''
    &t_TE = ''

    # see ":set-termcap"
    for i in 'abcdefghijklmnopqrstuvwxyz1234567890'
        exec $"set <M-{i}>=\<Esc>{i}"
    endfor
    set ttimeoutlen=100
endif

# <S-Space> in terminal {{{2
# additional setup: map <S-Space> to RHS of t_F9 keybinding
# in terminal emulator setting.
#
# t_F9 is <F19>. see ":h 't_F9'"
# (map t_F9 in local vimrc (AFTER souring this file!), since it is hard to
# decide the universe keybinding in different terminal emulators;
# if the terminal emulator supports binding <F19>, then no modification
# required in local vimrc)
#exec "set t_F9=\<Esc>0"
map <F19> <S-Space>
map! <F19> <S-Space>
tmap <F19> <S-Space>

# mouse in terminal {{{2
if !has('gui_running')
    # disable mouse support by default. make terminal happier.
    set mouse=
endif

# fix scroll behavior (H, L, zz, zt, zb ...) {{{2
# this may be set by /etc/vimrc (e.g. in fedora); let's recover it.
set scrolloff=0

# term & gui (but not colorscheme) {{{2
# TODO g:terminal_ansi_colors works even if (no gui && no tgc). is this a bug?
# NOTE: no `set bg`; seems that terminal theme (dark / light) can be detected.
if has('gui_running')
    # go-!: uniform shell interface, like :!, :sh.
    set guioptions=!
    set lines=30
    set columns=120
    if is_win32
        &guifont = 'JetBrains_Mono_NL:h12:cANSI:qDRAFT'
    elseif is_linux
        &guifont = 'JetBrains Mono NL 12'
    endif
elseif is_win32 # win32 console version
    # Try to set termguicolors; if success, &t_Co will be changed to 256,
    # then we can use better looking colorscheme.
    # At least works in windows 10 (1809+?).
    #
    # setting it causes panic in console vim from headless wine.
    if windowsversion()->str2float() >= 10
        set tgc
    elseif is_conemu # DO NOT set term=xterm for windows 10+
        # https://conemu.github.io/en/VimXterm.html
        #
        # But if we set this, unicode char will be rendered incorrectly!
        #set term=xterm
        #&t_Co = '256' # string required!
        #&t_AB = "\e[48;5;%dm"
        #&t_AF = "\e[38;5;%dm"
    endif
elseif &term == 'linux' # linux console
    ::
else # unix-like system, in terminal emulator
    # cursor shape (does not work if &term is set after init ?)
    &t_SI = "\<Esc>[5 q"
    &t_SR = "\<Esc>[4 q"
    &t_EI = "\<Esc>[1 q"

    # strikethrough
    &t_Ts = "\<Esc>[9m"
    &t_Te = "\<Esc>[0m"

    # 256color or tgc
    if &term !~ 'xterm'
        # make tgc work; :help xterm-true-color
        &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
        &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
    endif
    silent! set tgc

    if &term == 'xterm-kitty'
        # in kitty faq.
        &t_ut = ''
    endif

    if is_wsl && &term =~ 'xterm'
        # fix vim start in replace mode; https://superuser.com/a/1525060
        &t_u7 = ''
    endif

    if is_mac && $TERM_PROGRAM == 'Apple_Terminal'
        set notgc
    endif

    if &term =~ 'rxvt'
        set notgc
    endif
endif

if (is_conemu || is_mac) && &term =~ 'xterm'
    # italic; terminfo is buggy on conemu / macos?
    &t_ZH = "\<Esc>[3m"
    &t_ZR = "\<Esc>[0m"
endif

# Key mapping {{{1

# custom text object {{{2
# <silent> to avoid "Press Enter..." msg in too narrow screen.

# all
xnoremap <silent> aa :<C-u>normal! ggVG<CR>
onoremap <silent> aa :<C-u>normal! ggVG<CR>
# line
xnoremap <silent> al :<C-u>normal! 0v$h<CR>
onoremap <silent> al :<C-u>normal! 0v$h<CR>
# line, strip space
xnoremap <silent> il :<C-u>normal! ^vg_<CR>
onoremap <silent> il :<C-u>normal! ^vg_<CR>
# fold
xnoremap <silent> az V]zo[zo
onoremap <silent> az :<C-u>normal! V]zo[zo<CR>
# fold, without marker. (trailing marker is not un-select. press k if it
# exists.)
xnoremap <silent> iz V]zo[zjo
onoremap <silent> iz :<C-u>normal! V]zo[zjo<CR>
# fFtT
xnoremap <silent> <expr> af TextObjectIfAf('a')
onoremap <silent> <expr> af TextObjectIfAf('a')
xnoremap <silent> <expr> if TextObjectIfAf('i')
onoremap <silent> <expr> if TextObjectIfAf('i')
def TextObjectIfAf(type: string): string
    const ch = getcharstr()
    if empty(ch)
        return ''
    endif
    const op = type == 'a' ? 'fF' : 'tT'
    return ":\<C-u>normal! " .. op[0] .. ch .. "v" .. op[1] .. ch .. "\<CR>"
enddef

# mswin: disable v_CTRL-X (which is not compatible with unix) {{{2
# use vim_starting check to avoid unexpected behavior (map and then re-source).
if is_win32 && has('vim_starting') && !empty(maparg('<C-x>', 'v'))
    vunmap <C-x>
endif

# <M-c> / <M-v> in gui {{{2
if has('gui_running')
    xnoremap <M-c> "+y
    nnoremap <M-v> "+p
    inoremap <M-v> <C-r>+
    cnoremap <M-v> <C-r>+
    tnoremap <M-v> <C-w>"+
endif

# <M-hjkl> {{{2
tnoremap <M-h> <C-w>h
tnoremap <M-j> <C-w>j
tnoremap <M-k> <C-w>k
tnoremap <M-l> <C-w>l

nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

inoremap <M-h> <C-o><C-w>h
inoremap <M-j> <C-o><C-w>j
inoremap <M-k> <C-o><C-w>k
inoremap <M-l> <C-o><C-w>l

# <C-tab>; <M-t> {{{2
tnoremap <C-Tab> <C-w>gt
tnoremap <S-C-Tab> <C-w>gT

nnoremap <C-Tab> gt
nnoremap <S-C-Tab> gT

inoremap <C-Tab> <C-o>gt
inoremap <S-C-Tab> <C-o>gT

tnoremap <silent> <M-t> <C-w>:tabe<CR>
nnoremap <M-t> <Cmd>tabe<CR>
inoremap <silent> <M-t> <C-o>:tabe<CR>

# <M-1> - <M-9> {{{2
for i in range(1, 8)
    execute $"tnoremap <M-{i}> <C-w>{i}gt"
    execute $"nnoremap <M-{i}> {i}gt"
    execute $"inoremap <M-{i}> <C-o><C-w>{i}gt"
endfor
execute "tnoremap <silent> <M-9> <C-w>:tablast<CR>"
execute "nnoremap <M-9> <Cmd>tablast<CR>"
execute "inoremap <silent> <M-9> <C-o>:tablast<CR>"
# preserve <M-0> for DE / wm.

# t_<C-w> {{{2
# <C-w> as in terminal.
tnoremap <C-w> <C-w>.

# i_<C-u> {{{2
# from defaults.vim
inoremap <C-U> <C-G>u<C-U>

# i_<C-r>!; easy insert shell output {{{2
noremap! <C-r>! <C-r>=trim(system('exec 2>/dev/null; '))<Left><Left><Left>

# consistent Y, like C / D {{{2
nnoremap Y y$

# Normal: n / N {{{2
# always search forward / backward.
# https://vi.stackexchange.com/questions/2365/how-can-i-get-n-to-go-forward-even-if-i-started-searching-with-or#
noremap <expr> n 'Nn'[v:searchforward]
noremap <expr> N 'nN'[v:searchforward]

# v_* / v_#; like `g*` / `g#` {{{2
# feedkeys() second param: why not using 't'? {{{
#   because if using 't', then "\n" in first param will trigger <C-j> event,
#   which is what we define for other functions (see via `nmap <C-j>`). }}}
xnoremap <silent> * :<C-u>call feedkeys('/\V' .. substitute(escape(<SID>Selection(), '\/'), "\n", '\\n', 'g') .. "\n", 'n')<CR>
xnoremap <silent> # :<C-u>call feedkeys('?\V' .. substitute(escape(<SID>Selection(), '\/'), "\n", '\\n', 'g') .. "\n", 'n')<CR>

def Selection(): string
    const tmp = @"
    var result = ''
    var success = false
    try
        silent normal gvy
        success = true
    finally
        result = @"
        @" = tmp
        if !success
            throw 'Selection() failed!'
        endif
    endtry
    return result
enddef

# gF / v_gF {{{2
# (handle column nr; v_gF handle line / column nr)
# using plugin/jump.vim.
nmap gF <Plug>(jump_to_file)
xmap gF <Plug>(jump_to_file)

# t_<C-t>; escape from terminal {{{2
# used to use <C-Space>, but it may be occupied by DE / OS. {{{
# I don't use <C-t> key in terminal, so it's ok to map it. }}}
tnoremap <C-t> <C-\><C-n>

# <Space>g; prompt to run code (and remember last command) {{{2
nnoremap <expr> <Space>g SpaceGSetup()
def SpaceGSetup(): string
    if !exists('b:space_g')
        if empty(&buftype)
            const cmd = {
                awk: 'awk -f %',
                bc: 'bc %',
                go: 'go run %',
                javascript: (() => {
                    if executable('qjs')
                        return 'qjs %'
                    elseif executable('bun')
                        return 'bun run %'
                    elseif executable('deno')
                        return 'deno run %'
                    elseif executable('node')
                        return 'node %'
                    elseif executable('nodejs')
                        return 'nodejs %'
                    else
                        return ''
                    endif
                })(),
                pascal: 'fpc % && %:p:r',
                python: 'python3 %',
                scheme: 'scheme-run %',
                sh: (getline(1)->match('\v^\#\!.*<bash>') >= 0 ? 'bash' : 'sh') .. ' %:p',
                zig: 'zig run %',
                zsh: 'zsh %:p',
            }->get(&ft, '')
            # fallback to terminal shell if cmd is not set.
            b:space_g = $'up | Sh! -bt {cmd}'
        else
            if &ft == 'awk'
                b:space_g = ':%Sh! -bt awk -f /dev/stdin'
            elseif &ft == 'bc'
                b:space_g = ':%Sh! -bt bc'
            endif
        endif
        # special filetype
        if &ft == 'gitcommit'
            b:space_g = 'Sh -t=vs,c ' .. (
                $GIT_DIR =~ $'{$HOME}/dotfiles/.git' ? 'git g dc' : 'git dc')
        elseif &ft == 'vim'
            b:space_g = ':%so'
        endif
    endif
    feedkeys($':SpaceG {b:space_g}', 'n')
    return ''
enddef

command! -nargs=+ -complete=shellcmd SpaceG SpaceG(<q-args>)
def SpaceG(arg: string)
    b:space_g = arg
    execute b:space_g
enddef

# <Space>l {{{2
nnoremap <Space>l <Cmd>noh<CR>

# <Space>sl / <Space>ss; mksession. {{{2
nnoremap <Space>sl :so ~/.vim/sessions/
nnoremap <expr> <Space>ss
            \ $':wall \| mksession{empty(v:this_session) ? "" : "!"}'
            \ .. $' {v:this_session ?? "~/.vim/sessions/"}'

# <Space>s...; :Sh related. {{{2
nnoremap <Space>st :Cdb Sh -t
nnoremap <Space>sw :Cdb Sh -w
# add space after xmap, since we usually want to do sth on input.
xnoremap <Space>st :<C-u>Cdb :*Sh -vt<Space>
xnoremap <Space>sw :<C-u>Cdb :*Sh -vw<Space>

# <Space>y / <Space>p; Clipboard {{{2
if use_oscyank
    nnoremap <Space>y <Cmd>OSCYankRegister "<CR>
    nnoremap <Space>p <Cmd>echoerr 'use system paste shortcut instead!'<CR>
else
    # use pbcopy / pbpaste in $PATH as clipboard; wayland / x11 / tmux ...
    # detection is defined there. (~/bin/{pbcopy,pbpaste})
    nnoremap <Space>y <ScriptCmd>ClipboardCopy()<CR>
    nnoremap <Space>p <ScriptCmd>ClipboardPaste()<CR>
endif

def ClipboardCopy()
    if has('clipboard') && is_win32
        # NOTE: unix: X11 clipboard content will disapper when program exits.
        # but kde (plasma) has clipboard manager, which make it work
        # consistently.
        # 20221029_133619 wrap stmt with 'execute', since it complains
        # that + register is not available. I guess this is introduced in
        # recent commit.
        execute '@+ = @"'
    elseif executable('pbcopy')
        system('pbcopy', @")
    else
        throw 'clipboard not found!'
    endif
enddef

def ClipboardPaste()
    if has('clipboard') && is_win32
        execute '@" = @+'
    elseif executable('pbpaste')
        @" = system('pbpaste')
    else
        throw 'clipboard not found!'
    endif
enddef

# <Space><CR>; execute current line (or select lines), comment removed {{{2
nnoremap <Space><CR> <ScriptCmd>ExecuteLines('n')<CR>
xnoremap <Space><CR> <ScriptCmd>ExecuteLines('v')<CR>

def ExecuteLines(mode: string)
    var lines: list<string>
    if mode == 'n'
        lines = [getline('.')]
    elseif mode == 'v'
        const l1 = line('v')
        const l2 = line('.')
        lines = getline(min([l1, l2]), max([l1, l2]))
    endif
    var result_l = []
    for i in lines
        result_l = add(result_l, substitute(i, '\v^\s*(//|#|"|--|;)+', '', ''))
    endfor
    var result: string = join(result_l, "\n")
    echom result
    echo 'execute? y/N '
    if nr2char(getchar())->tolower() == 'y'
        redraws
        try
            execute result
        finally
        endtry
    else
        redraws | echon 'cancelled.'
    endif
enddef

# <Space>n; switch number / relativenumber {{{2
nnoremap <Space>n <ScriptCmd>Switch_nu_rnu()<CR>

def Switch_nu_rnu()
    # no [0, 1]
    const presents = [[1, 1], [1, 0], [0, 0], [1, 1]]
        ->mapnew((_, i) => [i[0] == 1, i[1] == 1])
    const idx = index(presents, [&l:nu, &l:rnu])
    [&l:nu, &l:rnu] = presents[idx + 1]
enddef

# <Space>m; switch mouse {{{2
nnoremap <Space>m <ScriptCmd>SwitchMouse()<CR>

def SwitchMouse()
    if &mouse == 'a'
        set mouse=
    else
        set mouse=a
    endif
enddef

# <Space>q; switch quickfix window (open / focus or close) {{{2
nnoremap <Space>q <ScriptCmd>SwitchQuickfixWindow()<CR>

def SwitchQuickfixWindow()
    if &ft == 'qf'
        cclose
    else
        execute 'bot' 'copen' &cwh
    endif
enddef

# <Space>v; shortcut for reader mode. (view code / text easily.) {{{2
# TODO map more key (one hand); provide help page (double ? to enter search mode).
nnoremap <Space>v <ScriptCmd>SwitchReaderMode()<CR>
var reader_mode = exists('reader_mode') ? reader_mode :
    {on: false, winid: -1, timeoutlen: 0}

def SwitchReaderMode()
    const mapping =<< trim END
        q <ScriptCmd>SwitchReaderMode()<CR>
        <Space> <C-f>
        <S-Space> <C-b>
        f <C-f>
        b <C-b>
        d <C-d>
        u <C-u>
        e <C-e>
        y <C-y>
        x <C-w>c
        1 1gt
        2 2gt
        3 3gt
        4 4gt
        5 5gt
        6 6gt
        7 7gt
        8 8gt
        9 <Cmd>tablast<CR>
    END
    if reader_mode.on
        mapping->mapnew((_, i) => {
            execute 'nunmap' i->split(' ')[0]
        })
        &timeoutlen = reader_mode.timeoutlen
        reader_mode.on = false
        popup_close(reader_mode.winid)
    else
        mapping->mapnew((_, i) => {
            execute 'nnoremap' i
        })
        reader_mode.winid = popup_create(
            ['reader mode'], {
                line: &lines,
                mapping: false,
                highlight: 'Special',
                tabpage: -1,  # show in all tabs.
            }
        )
        reader_mode.timeoutlen = &timeoutlen
        # set to 0 to make <Space> work (skip mapping immediately).
        &timeoutlen = 0
        reader_mode.on = true
    endif
enddef

# v_<Space>cx; swap selection with last deleted text. {{{2
# https://vim.fandom.com/wiki/Swapping_characters,_words_and_lines#Visual-mode_swapping
# slightly modified.
xnoremap <Space>cx <Esc>`.``gvp``P

# v_<Space>w; search selection with browser (requires tridactyl config) {{{2
xnoremap <Space>w :SearchWith<Space>
command -range -nargs=1 SearchWith SearchWith(<q-args>)
def SearchWith(keyword: string)
    const tmp = @"
    normal! gvy
    const selection = @"
    @" = tmp
    const pat = shellescape($'set searchurls.{keyword} ')
    const url_template = execute(
        'Sh '
        ..
        $'grep -Fh -- {pat} ~/.config/tridactyl/tridactylrc ~/.tridactylrc 2>/dev/null'
        ..
        ' | awk "/^set/ { print \$3 }"'
    )
    if url_template->match('^http') < 0
        throw $'vimrc: SearchWith: unable to get search engine "{keyword}"'
    endif
    const i = url_template->match('\V%s')
    if i < 0
        throw $'vimrc: SearchWith: search engine "{keyword}" does not contain "%s"'
    endif
    const url = url_template[ : i - 1] .. selection .. url_template[i + 2 : ]
    execute 'Sh -g' shellescape(url)
enddef

# Autocmd {{{1

augroup vimrc
    # misc (filetype related) {{{2
    # NOTE: "au BufNewFile,BufRead XXX setf YYY" should be put in
    # ftdetect/ (if filetype will not be detected by system filetype.vim)
    # or filetype.vim (to take higher priority over system filetype.vim);
    # otherwise "au FileType YYY .*" stmt won't work.
    #
    # complex filetype setting should be put in ftplugin/.

    au FileType yaml setl indentkeys-=0#
    au FileType zig setl formatprg=zig\ fmt\ --stdin
    au FileType json {
        &l:formatprg = executable('jq') ? 'jq' : (
            executable('python3') ? 'python3 -m json.tool' : ''
        )
    }
    # builtin omnifunc for sql blocks for several seconds.
    au FileType sql set omnifunc=

    # format html; command `tidy` does not work sometimes.
    au FileType html setl formatexpr=<SID>FormatHtml()
    def FormatHtml(): number
        execute $':{v:lnum},{v:lnum + v:count - 1}s/>\ze</&\r/g'
        return 0
    enddef

    # ":h ft-sh-syntax"
    g:is_posix = 1
    au FileType snip {
        const ft = expand('<afile>')->split('/')->get(-2)
        if ft != 'all' && ft->match('\v^[a-zA-Z0-9_.]+$') >= 0
            execute $'setlocal filetype=snip.{ft}'
        endif
    }
    # completion from vim's help page into vim
    au FileType help setl iskeyword+=^'

    # set completeopt when entering insert mode; {{{2
    # because plugin lsp set &completeopt unconditionally without honoring
    # user's setting;
    au InsertEnter * {
        if &completeopt->match('\<fuzzy\>') < 0
            noautocmd setl completeopt+=fuzzy
        endif
    }

    # quickfix window {{{2
    au FileType qf nnoremap <buffer> <C-n> <Cmd>cnewer<CR>
    au FileType qf nnoremap <buffer> <C-p> <Cmd>colder<CR>
    au FileType qf nnoremap <buffer> <C-j> <CR><C-w>p
    au FileType qf nnoremap <buffer> <Space>;l <Cmd>chistory<CR>

    # binary file editing. (ft=binary) {{{2
    # ReadBin / WriteBin impl {{{
    # avoid using busybox xxd. To use busybox xxd: `sed -E 's/  .*//' | xxd -r`;
    # since contents after 0x blocks are also parsed by busybox xxd.
    var xxd_path = 'xxd'
    # possible paths are from my vim-bin repo. (unix: $VIM/bin/xxd; win32:
    # $VIM/xxd.exe)
    const xxd_possible =<< eval trim END
        {$VIM}/bin/xxd
        {$VIM}/xxd.exe
    END
    for i in xxd_possible
        if filereadable(i)
            xxd_path = i
            break
        endif
    endfor

    def ReadBin(name: string)
        # we do not set 'shelltemp' option (to no); see relevant comment in
        # ~/vimfiles/vimrc.
        silent normal gg"_dG
        silent execute printf('r !%s %s', shellescape(xxd_path), shellescape(name))
        normal gg"_dd
        setl nomodified
    enddef

    def WriteBin(name: string)
        silent execute printf('w !%s -r > %s', shellescape(xxd_path), shellescape(name))
        if !empty(v:shell_error)
            return
        endif
        setl nomodified
        redrawstatus | echon 'written.'
    enddef
    # }}}

    command BinaryEditThis {
        const filename = expand('%:p')
        if !filename->filereadable()
            throw 'file associated to this buffer is not readable!'
        endif
        setl ft=binary
    }
    au FileType binary {
        if &modified
            throw 'file is changed! unable to set filetype to binary.'
        endif
        # if we don't set BufReadCmd, then re-edit file will not load binary data,
        # while BufWriteCmd still run xxd on write;
        # this will cause serious problem.
        au BufReadCmd <buffer> ReadBin(expand('<afile>'))
        # use do... since BufReadCmd will not take effect when defined after :e.
        do BufReadCmd
        au BufWriteCmd <buffer> WriteBin(expand('<amatch>'))
    }

    # network (non-local) file editing {{{2
    au BufReadCmd ftp://*,http://*,https://* {
        setl buftype=nofile
        # required if editing the same file (url) twice.
        setl modifiable
        execute 'Sh -r curl -sL --' shellescape(expand('<amatch>'))
        normal gg"_dd
        setl nomodifiable
    }

    # gx related (NOTE: key `gx` overwritten) {{{2
    nnoremap gx <ScriptCmd>Gx('n')<CR>
    # we cannot get visual selection if using <ScriptCmd>
    xnoremap <silent> gx :<C-u>call <SID>Gx('v')<CR>
    #xnoremap gx <ScriptCmd>Gx('v')<CR>

    def Gx(mode: string)
        var text: string
        if mode == 'v'
            var t = @"
            silent normal gvy
            text = @"
            @" = t
            text = substitute(text, "\n", '', 'g')
            # recover visual mode to match <ScriptCmd> behavior.
            silent normal gv
        else
            text = expand(get(g:, 'netrw_gx', '<cfile>'))
        endif
        if text->match('\v^[~$]') >= 0
            # expand ~ and $ (env).
            text = g:ExpandHead(text)
        endif
        echom text
        if has_gui
            execute 'Sh -g' text->shellescape()
        endif
    enddef

    # Remember the positions in files with some git-specific exceptions {{{2
    au BufReadPost * {
        # copied from /usr/share/vim/vim82/suse.vimrc
        if line("'\"") > 0 && line("'\"") <= line("$")
                    \ && expand("%") !~ "COMMIT_EDITMSG"
                    \ && expand("%") !~ "ADD_EDIT.patch"
                    \ && expand("%") !~ "addp-hunk-edit.diff"
                    \ && expand("%") !~ "git-rebase-todo"
            exe "normal g`\""
        else
            # fedora will do like if branch, but without checking whitelist;
            # so go to file head manually.
            exe 'normal gg0'
        endif
    }

    # open {file}:{line}[:{col}] automatically (provided by linter, etc). {{{2
    au BufNewFile * ReopenAsFileLineCol()

    def ReopenAsFileLineCol()
        var filename: string = bufname('%')
        var line: number = 0
        var column: number = 0
        if filename->filereadable()
            return
        endif
        for pat in ['\v^(.*):([0-9]+):?$', '\v^(.*):([0-9]+):([0-9]+):?$']
            const group = filename->matchlist(pat)
            if !!group && group[1]->filereadable()
                # str2nr('') returns 0.
                [filename, line, column] = [group[1], group[2]->str2nr(), group[3]->str2nr()]
                break
            endif
        endfor
        if filename->filereadable()
            execute 'edit' filename->fnameescape()
            # this is used to make ftdetect (and many other things) work
            do BufRead
            if line > 0
                execute 'normal' line .. 'G'
                if column > 0
                    execute 'normal 0' (column - 1) .. 'l'
                endif
            endif
        endif
    enddef

    # fix % in cmdwin when matchit plugin enabled. {{{2
    au BufEnter * {
        if win_gettype() == 'command' && maparg('%', 'x') =~ 'Matchit'
            xnoremap <buffer> % %
        endif
    }

    # `run-some-shellcmd | vim -`, without "No write since..." warning {{{2
    au StdinReadPre * setl bt=nofile noswapfile

    # prompt creating parent directory for files. {{{2
    au BufWritePre * {
        const dir = expand('%:p:h')
        if !isdirectory(dir)
            redrawstatus
            echo $'dir [{dir}] does not exist. create it? [y/N] '
            const input = getcharstr()
            echo "\n" | redrawstatus
            if input->tolower() == 'y'
                mkdir(dir, 'p')
            endif
        endif
    }

    # day/light theme switching {{{2
    def DayLightTheme()
        if executable('darkman')
            if system('darkman get') =~ 'light'
                set bg=light
            else
                set bg=dark
            endif
        endif
    enddef
    if has_gui && is_linux
        au SigUSR1 * DayLightTheme()
        if has('vim_starting')
            # console vim can detect day/light theme;
            # but when run inside tmux, it cannot. So run this anyway.
            DayLightTheme()
        endif
    endif

    # fix C-j / C-m misconfiguration when vim is invoked from zsh zle {{{2
    # see https://unix.stackexchange.com/a/485467
    def CtrlJ_CtrlM_fix()
        const pid = getpid()
        silent var tty = system($'ps -p {pid} -o tty=')->trim()
        if empty(tty)
            return
        endif
        tty = $'/dev/{tty}'
        if !filewritable(tty)
            return
        endif
        silent if system($'stty -F {tty}')->match('\v(\-)@!inlcr') >= 0
            # we need to run stty in a tty; run via system() / ":!" won't work.
            term_start($'stty -F {tty} -inlcr', {hidden: true})
        endif
    enddef

    if isdirectory('/dev') && !has('gui_running')
        au VimEnter * CtrlJ_CtrlM_fix()
    endif

    # remove printable key mapping in Select-Mode {{{2
    au VimEnter * {
        for i in execute('smap')
                ->split("\n")
                # skip maps defined via smap
                ->filter((_, i) => i->match('^s') < 0)
                # skip <Plug>
                ->filter((_, i) => i->match('\c^.\s*<plug>') < 0)
                # skip <buffer>
                ->filter((_, i) => i->match('^.\s*\S\+\s*\*@') < 0)
                # extract lhs
                ->map((_, i) => i->matchstr('^.\s*\zs\S\+\ze'))
                ->sort()->uniq()
            silent! execute $'sunmap {i}'
        endfor
    }

    # after executing this, `smap` still leaves some mappings;
    # handle them manually.

    # mapped in /usr/share/vim/vim91/ftplugin/vim.vim
    au FileType vim {
        for i in ['[[', ']]', '[]', '][', ']"', '["']
            silent! execute $'sunmap <buffer> {i}'
        endfor
    }

    # which-key helper {{{2
    # e.g. when pressing <Space>f and forget which key follows, then press <Space>
    # again, to trigger <Space><Space>f ("<Space><Space>" then "f").
    #
    # depends on ./plugin/which-key.vim
    au VimEnter * {
        var leading_map = {}
        for i in execute('nmap <Space>')->split("\n")
                ->filter((_, i) => i->match('^[inv]') >= 0)
                ->map((_, i) => i->matchstr('\v^\w\s+\zs\S+\ze')->substitute('\V\^<Space>', '', ''))
                ->filter((_, i) => i->match('\V<') < 0)
            if !leading_map->has_key(i[0])
                leading_map[i[0]] = []
            endif
            leading_map[i[0]]->add(i)
        endfor
        for i in leading_map->keys()
            if leading_map[i]->len() > 1
                execute $'nmap <Space>{i}<Space> <Space><Space>{i}'
            endif
        endfor
    }

    # macvim: avoid stealing focus after closing a vim window. {{{2
    # this is from ":h macvim-hints".
    if has('gui_macvim')
        au VimLeave * maca hide:
    endif

augroup END  # {{{2

# Colorscheme {{{1

# only set colorscheme if not set yet. {{{2
# using `trim(execute('color')) == 'default'` is not valid.
if !exists('g:colors_name')
    if has('gui_running') || &t_Co->str2nr() >= 256
        color base16-dynamic
    else
        if is_win32
            if is_conemu
                color retrobox
            else
                # cmd.exe window
                color default
            endif
        else
            color default
        endif
    endif
endif

# colorscheme tweak {{{2
def ColorSchemeTweak()
    hi! link StatusLineTermNC StatusLineNC

    # terminal 16color
    if (has('gui_running') || &tgc)
        # https://github.com/lxhillwind/base16-dynamic.vim
        # slightly modified: some colors are from xfce4 terminal.
        if &bg == 'dark'
            g:terminal_ansi_colors = ["#263238", "#F07178", "#4e9a06", "#FFCB6B", "#739fcf", "#C792EA", "#34e2e2", "#EEFFFF", "#546E7A", "#F07178", "#4e9a06", "#FFCB6B", "#739fcf", "#C792EA", "#34e2e2", "#FFFFFF"]
        else
            g:terminal_ansi_colors = ["#000000", "#ca1243", "#50a14f", "#cdcd00", "#0000cd", "#a626a4", "#00cdcd", "#e5e5e5", "#000000", "#ca1243", "#50a14f", "#c18401", "#4078f2", "#a626a4", "#00cdcd", "#e5e5e5"]
        endif
    endif

    # fix cterm underline in CursorLineNr
    hi CursorLineNr cterm=NONE

    if is_conemu
        hi CursorLine cterm=NONE ctermbg=1
    endif
enddef

augroup vimrc
    # colorscheme may not change at startup.
    au ColorScheme * ColorSchemeTweak()
augroup END
ColorSchemeTweak()

# Command {{{1

# :CopyMatches  {{{2
# https://vim.fandom.com/wiki/Copy_search_matches#Copy_matches
# original snippet does not work...
command! CopyMatches CopyMatches()
def CopyMatches()
    var hits = []
    :%s//\=add(hits, submatch(0))/gne
    @" = join(hits, "\n") .. "\n"
enddef

# :DiffOrig {{{2
# see help :DiffOrig
command! DiffOrig vert new | set bt=nofile | legacy r ++edit # | legacy 0d_
    | diffthis | wincmd p | diffthis

# <range>:J sep... (`J` with custom seperator) {{{2
command! -nargs=1 -range J JoinLines(<q-args>, <range>, <line1>, <line2>)
def JoinLines(sep: string, range: number, line1: number, line2: number)
    const result = getline(line1, line2)->join(sep)
    deletebufline('%', line1, line2)
    append(max([line1 - 1, 0]), result)
    normal k
enddef

# :InitScratchPad; simulate sticky notes {{{2
command! -bang InitScratchPad InitScratchPad(<bang>false)
def InitScratchPad(force: bool)
    # Wrap !force with (); see:
    # https://github.com/vim/vim/issues/14265 (patch 9.1.0197)
    if !has('gui_running') && (!force)
        throw 'only supported in GUI version! (add bang to force using it)'
    endif
    set foldmethod=manual
    set nonumber
    set norelativenumber
    set columns=36
    set lines=30
    if has('gui_running')
        if is_mac
            &guifont = 'Monaco:h21'
        elseif is_linux
            &guifont = 'DejaVu Sans Mono 16'
        elseif is_win32
            if windowsversion()->str2float() <= 5.1
                &guifont = 'Courier_New:h16:cANSI:qDRAFT'
            else
                &guifont = 'Consolas:h18:cANSI:qDRAFT'
            endif
        endif
    endif
    const scratch_home = $'{$HOME}/.vim/scratch'
    if !isdirectory(scratch_home)
        mkdir(scratch_home, 'p')
    endif
    silent execute 'cd' scratch_home->fnameescape()
enddef

# :MacroDump / :MacroSet;  save / restore macro from line {{{2
command! -nargs=1 MacroDump MacroDump(<q-args>)
command! -nargs=1 MacroSet MacroSet(<q-args>)

def MacroDump(reg: string)
    if reg !~ '^[a-z]$' | throw 'expect a single character (register)' | endif
    # in terminal vim, if set "ttimeoutlen" to a positive value,
    # "<Esc>" will be recorded as "\x1b\x80\xfd5",
    # which in file will cause trouble in encoding detection.
    #
    # The "\x80\xfd5" occurs in some other places; replace them all.
    setline('.', getreg(reg)->substitute("\x80\xfd5", "", 'g'))
enddef

def MacroSet(reg: string)
    if reg !~ '^[a-z]$' | throw 'expect a single character (register)' | endif
    # "<Esc>" alone will not work if "ttimeoutlen" is a positive value in
    # terminal vim;
    # longer version of it works in other vim instance (gui or no ttimeoutlen);
    # so set it unconditionally.
    setreg(reg, getline('.')->substitute("\<Esc>", "\x1b\x80\xfd5", 'g'))
enddef

# :MatchLongLine {number} {{{2
# Refer: https://stackoverflow.com/a/1117367
command! -nargs=1 MatchLongLine exe ':/\%>' .. <args> .. 'v.\+'

# :OpenWithVSCode {{{2
command! OpenWithVSCode {
    const file = expand('%:p')
    const line = line('.')
    const column = charcol('.')
    const param = empty(file) ? 'code -n ./' : (
        printf('code -n ./ && code -r -g %s:%s:%s', shellescape(file), line, column)
    )
    execute 'Cdproject' 'Sh' param
}

# :Rg {{{2
command! -nargs=+ Rg Rg(<q-args>)

def Rg(args: string)
    # TODO show rg process status.
    if !executable('rg')
        throw '`rg` expected, but not found in $PATH.'
    endif
    const cmd = 'rg --vimgrep ' .. args
    setqflist([], 'r', {'title': cmd, 'lines': []})
    const job_cmd = execute('Sh -n ' .. cmd)->json_decode().cmd
    const job_id = job_start(job_cmd, {
        # TODO pty option is only available on Unix-like systems.
        # pty is required to make rg not detecting stdin.
        pty: 1,
        out_mode: 'nl',
        out_cb: (_, msg) => {
            setqflist([], 'a', {lines: [msg]})
        },
    })
    copen
    b:rg_job_id = job_id
    nnoremap <silent> <expr> <buffer> <C-c> RgCallback()
enddef

def RgCallback(): string
    const job = b:rg_job_id
    if job->job_status() == 'run'
        job->job_stop()
        sleep 50m
        if job->job_status() == 'run'
            job->job_stop('kill')
            echo 'rg: job killed.'
        else
            echo 'rg: job stopped.'
        endif
    else
        echo 'rg: job already stopped.'
    endif
    unlet b:rg_job_id
    nunmap <buffer> <C-c>
    return ''
enddef

# :Scratch [filetype]; make current buffer as scratch pad {{{2
command -nargs=? -complete=filetype Scratch Scratch(<q-args>)

def Scratch(ft: string)
    enew | setl buftype=nofile noswapfile bufhidden=hide
    if !empty(ft)
        exe 'setl ft=' .. ft
    endif
enddef

# :Search {string}; like simple search in other GUI applications. {{{2
command -nargs=+ Search Search(<q-args>)

def Search(s: string)
    const pattern = s->escape('\/')
    feedkeys('/\V' .. pattern, 'n')
enddef

# :ShebangInsert [content after "#!/usr/bin/env "] {{{2
command! -nargs=* -complete=shellcmd ShebangInsert ShebangInsert(<q-args>)

g:vimrc_shebang_lines = {
    'awk': 'awk-f',  # awk: wrapper executing "awk -f" is required.
    'javascript': 'node', 'lua': 'lua',
    'perl': 'perl', 'python': 'python', 'ruby': 'ruby',
    'scheme': 'scheme-run',  # scheme: see ~/bin/scheme-run
    'sh': '/bin/sh', 'zsh': 'zsh',
}

def ShebangInsert(args: string)
    const first_line = getline(1)
    if len(first_line) >= 2 && first_line[0 : 1] == '#!'
        throw 'shebang exists!'
    endif
    var shebang: string
    if has_key(g:vimrc_shebang_lines, args)
        shebang = g:vimrc_shebang_lines[args]
    elseif !empty(args)
        shebang = args
    elseif has_key(g:vimrc_shebang_lines, &ft)
        shebang = g:vimrc_shebang_lines[&ft]
    else
        throw 'shebang: which interpreter to run?'
    endif
    if match(shebang, '^/') >= 0
        shebang = '#!' .. shebang
    else
        shebang = '#!/usr/bin/env ' .. shebang
    endif
    # insert at first line and leave cursor here (for further modification)
    normal ggO<Esc>
    var ret = setline(1, shebang)
    if ret == 0  # success
        normal $
    else
        throw 'setting shebang error!'
    endif
enddef

# :Yank [...] (yank; default filename; otherwise expand(<q-args>)) {{{2
command! -nargs=* Yank @" = expand(empty(<q-args>) ? '%:t' : <q-args>)

# TODO {{{1

# - toc / content: 'gO' in neovim; (help / markdown, etc.)
# - user completion; 'compl-function'. (tmux buffer, web browser, etc.)
# - search files (globpath(), executable() / exepath() without absolute path,
#   :packadd, :colorscheme) in win32 (wsl) is slow; try to avoid calling them
#   in vimrc.
#
# NOTE: DO NOT split vimrc. pro & con of maintaining a monolithic vimrc:
# - pro: easy to find out thing;
# - pro: plain layout, no magic;
# - con: not easy to find startuptime impact;
# - con: namespace (not suitable for short name var);

defc  # show error in this file early. {{{1 }}}1
# vim:fdm=marker:tw=78:sw=4
