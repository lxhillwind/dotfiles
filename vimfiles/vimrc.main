" vim: fdm=marker
" vimrc for +eval.
"
" about loading order:
"
" disable filetype detection before ":packadd", otherwise ftdetect in packages
" won't be loaded. (call "filetype off" to ensure it is disabled)
"
" "colorscheme XXX" should be called very lately, since it usally depends on
" "syntax on", which calls "filetype on", if not loaded (or filetype-off
" before).
"
" be sure to also call "syntax on", if set colorscheme in vimrc.local.

if v:version < 800
  echoerr 'vim version too old:' v:version
  finish
endif

" add this directory to &rtp / &pp
execute 'set rtp^=' . fnameescape(expand('<sfile>:p:h'))
execute 'set rtp+=' . fnameescape(expand('<sfile>:p:h') . '/after')
if exists('&pp')
  execute 'set pp^=' . fnameescape(expand('<sfile>:p:h'))
endif

let s:self = expand('<sfile>')
function! s:load_script(file) abort
  exec 'source' fnameescape(fnamemodify(s:self, ':p:h') . '/' . a:file)
endfunction

" export SID (:h SID); variable: g:vimrc_sid {{{1
function! s:get_sid(filename)
  for i in split(execute('scriptnames'), "\n")
    let id = substitute(i, '\v^\s*(\d+): .*$', '\1', '')
    let file = substitute(i, '\v^\s*\d+: ', '', '')
    if a:filename ==# expand(file)
      return id
    endif
  endfor
  return 0
endfunction
let g:vimrc_sid = s:get_sid(expand('<sfile>'))
" }}}1

call s:load_script('vimrc.tiny')

if has('win32')
  " setup env before calling vim-vimserver in rc/option.vim
  call s:load_script('rc/win32.vim')
endif
call s:load_script('rc/option.vim')

call s:load_script('rc/keymap.vim')
call s:load_script('rc/filetype.vim')
call s:load_script('rc/command.vim')
if exists(':def') == 2
  call s:load_script('rc/command.vim9')
endif
call s:load_script('rc/pack.vim')
call s:load_script('rc/tasks.vim')

" ensure filetype detection is disabled before calling ":packadd".
filetype off

" load plugin (:Pack is defined in rc/pack.vim)
if exists(':Pack') == 2
  Pack 'vim-filelist'
  Pack 'vim-jump'
  Pack 'vim-sh'
endif

" some variable used by plugin (can be overwritten in vimrc.local)
function! s:joinpath(path) abort
  return fnamemodify(s:self, ':h') . '/' . a:path
endfunction

let g:tasks_config_paths = [s:joinpath('config/tasks.ini')]
if filereadable(s:joinpath('config/tasks-local.ini'))
  call add(g:tasks_config_paths, s:joinpath('config/tasks-local.ini'))
endif

" source local vimrc
if filereadable(fnamemodify(s:self, ':p:h') . '/' . 'vimrc.local')
  call s:load_script('vimrc.local')
else
  " use default plugin
  call s:load_script('rc/pkgs.vim')
endif

" this also enables filetype.
filetype plugin indent on

" set colorscheme (if not set before) at very end (after "filetype on");
" since it ("syntax on") loads filetype.vim unless already loaded.
call s:load_script('rc/color.vim')
